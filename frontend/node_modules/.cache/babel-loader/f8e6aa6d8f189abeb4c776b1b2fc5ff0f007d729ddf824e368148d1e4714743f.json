{"ast":null,"code":"var _jsxFileName = \"E:\\\\Prog stuff\\\\OGame\\\\frontend\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, createContext, useEffect, useContext, useRef } from 'react';\nimport { Window, MessageList, MessageInput, useChatContext } from 'stream-chat-react';\nimport './Chat.css';\nimport '../config/firebase-config';\nimport './Components.css';\nimport Board from './Board';\nimport Keyboard from './Keyboard';\nimport { boardDefault, generateWordSet } from './Words';\nimport WordInput from './WordInput';\nimport { Inputcontext } from './WordInput';\nimport wordleInput from './WordInput';\nimport GameOver from './GameOver';\nimport Win from './Win';\nimport Loose from './Loose';\nimport firebase from 'firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Gamecontext = /*#__PURE__*/createContext();\nfunction Game(_ref) {\n  _s();\n  let {\n    channel,\n    selectedWord,\n    wordSet\n  } = _ref;\n  //popup\n  // const [showWordInput, setShowWordInput] = useState(true)\n  // input for wordle\n\n  //wordle\n  const [board, setBoard] = useState(boardDefault);\n  const [currAttempt, setCurrAttempt] = useState({\n    attempt: 0,\n    letterPos: 0\n  });\n  const [disabledLetters, setDisabledLetters] = useState([]);\n  const [gameOver, setGameOver] = useState({\n    gameOver: false,\n    guessedWord: false\n  });\n  const [correctWord, setCorrectWord] = useState(selectedWord);\n  const [checkWin, setCheckWin] = useState(false);\n  const [winnerUserId, setWinnerUserId] = useState(null);\n  const [winnerUsername, setWinnerUsername] = useState(\"\");\n  const [winnerTempWord, setWinnerTempWord] = useState(\"\");\n  const [winnerAttempt, setWinnerAttempt] = useState(\"\");\n  const [checkLoose, setCheckLoose] = useState(false);\n  const [timer, setTimer] = useState(320);\n  const [winnerUsernameId, setWinnerUsernameId] = useState(null);\n  const [loserUserId, setLoserUserId] = useState(null);\n  const {\n    client\n  } = useChatContext();\n  const onSelectLetter = keyVal => {\n    if (currAttempt.letterPos > 4) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letterPos] = keyVal;\n    setBoard(newBoard);\n    setCurrAttempt({\n      ...currAttempt,\n      letterPos: currAttempt.letterPos + 1\n    });\n  };\n  const onDelete = () => {\n    if (currAttempt.letterPos === 0) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letterPos - 1] = \"\";\n    setBoard(newBoard);\n    setCurrAttempt({\n      ...currAttempt,\n      letterPos: currAttempt.letterPos - 1\n    });\n  };\n  const onEnter = () => {\n    if (currAttempt.letterPos !== 5) return;\n    let currWord = \"\";\n    for (let i = 0; i < 5; i++) {\n      currWord += board[currAttempt.attempt][i];\n      currWord.toLowerCase();\n    }\n    if (wordSet.has(currWord.toLowerCase())) {\n      setCurrAttempt({\n        attempt: currAttempt.attempt + 1,\n        letterPos: 0\n      });\n    } else {\n      alert(\"Word not found\");\n    }\n    if (currWord.trim().toLowerCase() === correctWord.trim().toLowerCase()) {\n      var _client$user, _client$user2, _client$user3;\n      channel.sendMessage({\n        text: `${(_client$user = client.user) === null || _client$user === void 0 ? void 0 : _client$user.name} guessed the word \"${correctWord}\"!`,\n        message_type: 'win',\n        winnerUserId: (_client$user2 = client.user) === null || _client$user2 === void 0 ? void 0 : _client$user2.id,\n        winnerTempWord: currWord,\n        winnerUsername: (_client$user3 = client.user) === null || _client$user3 === void 0 ? void 0 : _client$user3.name,\n        winnerAttempt: currAttempt.attempt\n      });\n    }\n    if (currAttempt.attempt === 5 && wordSet.has(currWord.toLowerCase())) {\n      var _client$user4, _client$user5;\n      channel.sendMessage({\n        text: `${(_client$user4 = client.user) === null || _client$user4 === void 0 ? void 0 : _client$user4.name} failed to guess the word \"${correctWord}\"!`,\n        message_type: 'loose'\n      });\n      setLoserUserId((_client$user5 = client.user) === null || _client$user5 === void 0 ? void 0 : _client$user5.id);\n      setGameOver({\n        gameOver: true,\n        guessedWord: false\n      });\n    }\n    console.log(correctWord);\n  };\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setTimer(prevTimer => {\n        if (prevTimer > 0) {\n          return prevTimer - 1;\n        } else {\n          var _client$user6, _client$user7;\n          channel.sendMessage({\n            text: `${(_client$user6 = client.user) === null || _client$user6 === void 0 ? void 0 : _client$user6.name} failed to guess the word \"${correctWord}\"!`,\n            message_type: 'loose'\n          });\n          setLoserUserId((_client$user7 = client.user) === null || _client$user7 === void 0 ? void 0 : _client$user7.id);\n          clearInterval(intervalId);\n          return prevTimer;\n        }\n      });\n    }, 1000); // 1000ms = 1 second\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n  useEffect(() => {\n    // This effect will run when the component mounts or when a new game is created\n    // and will clear the messages in the channel\n    channel.truncate();\n  }, [channel]);\n\n  //checkwin\n  useEffect(() => {\n    const handleEvent = event => {\n      if (event.type === \"message.new\" && event.message.text.includes(\"guessed the word\")) {\n        setCheckWin(true);\n        setGameOver({\n          gameOver: false,\n          guessedWord: false\n        });\n      }\n    };\n    channel.on(\"message.new\", handleEvent);\n    channel.on(\"message.updated\", handleEvent);\n    return () => {\n      channel.off(\"message.new\", handleEvent);\n      channel.off(\"message.updated\", handleEvent);\n    };\n  }, []);\n  // checkloose\n\n  useEffect(() => {\n    let count = 0; // initialize a counter variable\n\n    const handleEvent = event => {\n      if (event.type === \"message.new\" && event.message.text.includes(\"failed to guess\")) {\n        count++; // increment the counter\n        if (count === 2) {\n          setGameOver({\n            gameOver: false,\n            guessedWord: false\n          });\n          setCheckLoose(true); // set checkWin to true when the message is seen twice\n        }\n      }\n    };\n\n    channel.on(\"message.new\", handleEvent);\n    channel.on(\"message.updated\", handleEvent);\n    return () => {\n      channel.off(\"message.new\", handleEvent);\n      channel.off(\"message.updated\", handleEvent);\n    };\n  }, []);\n  useEffect(() => {\n    if (gameOver.guessedWord) {\n      firebase.firestore().collection('users').doc(winnerUserId).update({\n        wins: firebase.firestore.FieldValue.increment(1)\n      });\n      firebase.firestore().collection('users').doc(loserUserId).update({\n        losses: firebase.firestore.FieldValue.increment(1)\n      });\n    } else if (gameOver.gameOver) {\n      firebase.firestore().collection('users').doc(winnerUserId).update({\n        losses: firebase.firestore.FieldValue.increment(1)\n      });\n      firebase.firestore().collection('users').doc(loserUserId).update({\n        losses: firebase.firestore.FieldValue.increment(1)\n      });\n    }\n  }, [gameOver, winnerUserId, loserUserId]);\n  const [playersJoined, setPlayersJoined] = useState(channel.state.watcher_count === 2);\n  channel.on(\"user.watching.start\", event => {\n    setPlayersJoined(event.watcher_count === 2);\n  });\n\n  // winner\n  const [result, setResult] = useState({\n    winner: \"none\",\n    state: \"none\"\n  });\n  if (!playersJoined) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Waiting for other player to join\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameContainer\",\n    children: [/*#__PURE__*/_jsxDEV(Gamecontext.Provider, {\n      value: {\n        board,\n        setBoard,\n        currAttempt,\n        setCurrAttempt,\n        onSelectLetter,\n        onDelete,\n        onEnter,\n        correctWord,\n        setDisabledLetters,\n        disabledLetters,\n        gameOver,\n        setGameOver\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game\",\n        children: checkWin ? /*#__PURE__*/_jsxDEV(Win, {\n          winnerUserId: winnerUserId,\n          winnerTempWord: winnerTempWord,\n          winnerUsername: winnerUsername,\n          winnerAttempt: winnerAttempt,\n          channel: channel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 25\n        }, this) : checkLoose ? /*#__PURE__*/_jsxDEV(Loose, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 29\n        }, this) : gameOver.gameOver ? /*#__PURE__*/_jsxDEV(GameOver, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 36\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"timer\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: `Time remaining: ${Math.floor(timer / 60)}:${timer % 60 .toString().padStart(2, '0')}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Keyboard, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Window, {\n      children: [/*#__PURE__*/_jsxDEV(MessageList, {\n        disableDateSeparator: true,\n        closeReactionSelectorOnClick: true,\n        messageActions: [\"react\"],\n        hideDeletedMessages: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n        noFiles: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"i50k/TSP1pYfwWKwRSJA/IYnyF4=\", false, function () {\n  return [useChatContext];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","createContext","useEffect","useContext","useRef","Window","MessageList","MessageInput","useChatContext","Board","Keyboard","boardDefault","generateWordSet","WordInput","Inputcontext","wordleInput","GameOver","Win","Loose","firebase","Gamecontext","Game","channel","selectedWord","wordSet","board","setBoard","currAttempt","setCurrAttempt","attempt","letterPos","disabledLetters","setDisabledLetters","gameOver","setGameOver","guessedWord","correctWord","setCorrectWord","checkWin","setCheckWin","winnerUserId","setWinnerUserId","winnerUsername","setWinnerUsername","winnerTempWord","setWinnerTempWord","winnerAttempt","setWinnerAttempt","checkLoose","setCheckLoose","timer","setTimer","winnerUsernameId","setWinnerUsernameId","loserUserId","setLoserUserId","client","onSelectLetter","keyVal","newBoard","onDelete","onEnter","currWord","i","toLowerCase","has","alert","trim","sendMessage","text","user","name","message_type","id","console","log","intervalId","setInterval","prevTimer","clearInterval","truncate","handleEvent","event","type","message","includes","on","off","count","firestore","collection","doc","update","wins","FieldValue","increment","losses","playersJoined","setPlayersJoined","state","watcher_count","result","setResult","winner","Math","floor","toString","padStart"],"sources":["E:/Prog stuff/OGame/frontend/src/components/Game.js"],"sourcesContent":["import React, { useState, createContext, useEffect, useContext, useRef } from 'react'\r\nimport { Window, MessageList, MessageInput, useChatContext } from 'stream-chat-react'\r\nimport './Chat.css';\r\nimport '../config/firebase-config';\r\nimport './Components.css';\r\nimport Board from './Board';\r\nimport Keyboard from './Keyboard';\r\nimport { boardDefault, generateWordSet } from './Words';\r\nimport WordInput from './WordInput';\r\nimport { Inputcontext } from './WordInput';\r\nimport wordleInput from './WordInput';\r\nimport GameOver from './GameOver';\r\nimport Win from './Win';\r\nimport Loose from './Loose';\r\nimport firebase from 'firebase';\r\n\r\n\r\nexport const Gamecontext = createContext();\r\n\r\nfunction Game({channel, selectedWord, wordSet}) {\r\n\r\n\r\n\r\n  //popup\r\n // const [showWordInput, setShowWordInput] = useState(true)\r\n  // input for wordle\r\n\r\n  //wordle\r\n  const [board, setBoard] = useState(boardDefault);\r\n  const [currAttempt, setCurrAttempt] = useState({attempt: 0, letterPos: 0});\r\n  const [disabledLetters, setDisabledLetters] = useState([]);\r\n  const [gameOver, setGameOver] = useState({gameOver: false, guessedWord: false,});\r\n  const [correctWord, setCorrectWord] = useState(selectedWord);\r\n  const [checkWin, setCheckWin] = useState(false);\r\n  const [winnerUserId, setWinnerUserId] = useState(null);\r\n  const [winnerUsername, setWinnerUsername] = useState(\"\");\r\n  const [winnerTempWord, setWinnerTempWord] = useState(\"\");\r\n  const [winnerAttempt, setWinnerAttempt] = useState(\"\");\r\n  const [checkLoose, setCheckLoose] = useState(false);\r\n  const [timer, setTimer] = useState(320);\r\n  const [winnerUsernameId, setWinnerUsernameId] = useState(null);\r\n  const [loserUserId, setLoserUserId] = useState(null);\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n  const { client } = useChatContext();\r\n\r\n\r\n\r\n\r\n\r\n  \r\n\r\n  const onSelectLetter = (keyVal) =>{\r\n    if (currAttempt.letterPos > 4) return;\r\n\r\n    const newBoard = [...board];\r\n    newBoard[currAttempt.attempt][currAttempt.letterPos] = keyVal;\r\n    setBoard(newBoard);\r\n    setCurrAttempt({...currAttempt, letterPos: currAttempt.letterPos + 1});\r\n  }\r\n\r\n  const onDelete = () => {\r\n    if (currAttempt.letterPos === 0 ) return; \r\n    const newBoard = [...board];\r\n    newBoard[currAttempt.attempt][currAttempt.letterPos - 1] = \"\";\r\n    setBoard(newBoard)\r\n    setCurrAttempt({ ...currAttempt, letterPos: currAttempt.letterPos -1 });\r\n  }\r\n\r\n  const onEnter = () => {\r\n    if (currAttempt.letterPos !== 5) return;\r\n    let currWord = \"\";\r\n    for (let i = 0; i < 5; i++) {\r\n      currWord += board[currAttempt.attempt][i];\r\n      currWord.toLowerCase()\r\n    }\r\n    if (wordSet.has(currWord.toLowerCase())) {\r\n      setCurrAttempt({ attempt: currAttempt.attempt + 1, letterPos: 0});\r\n    } else {\r\n      alert (\"Word not found\")\r\n    }\r\n\r\n    if (currWord.trim().toLowerCase() === correctWord.trim().toLowerCase()) {\r\n      channel.sendMessage({\r\n        text: `${client.user?.name} guessed the word \"${correctWord}\"!`,\r\n        message_type: 'win',\r\n        winnerUserId: client.user?.id,\r\n        winnerTempWord: currWord,\r\n        winnerUsername: client.user?.name,\r\n        winnerAttempt: currAttempt.attempt\r\n        \r\n      });\r\n\r\n\r\n\r\n    }\r\n    if (currAttempt.attempt === 5 && wordSet.has(currWord.toLowerCase())){\r\n      channel.sendMessage({\r\n        text: `${client.user?.name} failed to guess the word \"${correctWord}\"!`,\r\n        message_type: 'loose'\r\n      })\r\n      setLoserUserId(client.user?.id);\r\n      setGameOver({gameOver: true, guessedWord: false});\r\n    }\r\n    console.log(correctWord);\r\n  } \r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      setTimer((prevTimer) => {\r\n        if (prevTimer > 0) {\r\n          return prevTimer - 1;\r\n        } else {\r\n          channel.sendMessage({\r\n            text: `${client.user?.name} failed to guess the word \"${correctWord}\"!`,\r\n            message_type: 'loose'\r\n          })\r\n          setLoserUserId(client.user?.id);\r\n          clearInterval(intervalId);\r\n          return prevTimer;\r\n        }\r\n      });\r\n    }, 1000); // 1000ms = 1 second\r\n\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);\r\n\r\n\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    // This effect will run when the component mounts or when a new game is created\r\n    // and will clear the messages in the channel\r\n    channel.truncate();\r\n  }, [channel]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  //checkwin\r\n  useEffect(() => {\r\n\r\n    const handleEvent = (event) => {\r\n      if (\r\n        event.type === \"message.new\" &&\r\n        event.message.text.includes(\"guessed the word\")\r\n      ) {\r\n        setCheckWin(true);\r\n        setGameOver({gameOver: false, guessedWord: false});\r\n      }\r\n    };\r\n\r\n    channel.on(\"message.new\", handleEvent);\r\n    channel.on(\"message.updated\", handleEvent);\r\n\r\n    return () => {\r\n      channel.off(\"message.new\", handleEvent);\r\n      channel.off(\"message.updated\", handleEvent);\r\n    };\r\n  }, []);\r\n  // checkloose\r\n \r\n  useEffect(() => {\r\n\r\n    let count = 0; // initialize a counter variable\r\n  \r\n    const handleEvent = (event) => {\r\n      if (\r\n        event.type === \"message.new\" &&\r\n        event.message.text.includes(\"failed to guess\")\r\n      ) {\r\n        count++; // increment the counter\r\n        if (count === 2) {\r\n          setGameOver({gameOver: false, guessedWord: false});\r\n          setCheckLoose(true); // set checkWin to true when the message is seen twice\r\n        }\r\n      }\r\n    };\r\n  \r\n    channel.on(\"message.new\", handleEvent);\r\n    channel.on(\"message.updated\", handleEvent);\r\n  \r\n    return () => {\r\n      channel.off(\"message.new\", handleEvent);\r\n      channel.off(\"message.updated\", handleEvent);\r\n    };\r\n  }, []);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (gameOver.guessedWord) {\r\n      firebase.firestore().collection('users').doc(winnerUserId).update({\r\n        wins: firebase.firestore.FieldValue.increment(1)\r\n      });\r\n      firebase.firestore().collection('users').doc(loserUserId).update({\r\n        losses: firebase.firestore.FieldValue.increment(1)\r\n      });\r\n    } else if (gameOver.gameOver) {\r\n      firebase.firestore().collection('users').doc(winnerUserId).update({\r\n        losses: firebase.firestore.FieldValue.increment(1)\r\n      });\r\n      firebase.firestore().collection('users').doc(loserUserId).update({\r\n        losses: firebase.firestore.FieldValue.increment(1)\r\n      });\r\n    }\r\n  }, [gameOver, winnerUserId, loserUserId]);\r\n\r\n  \r\n  \r\n\r\n\r\n\r\n  const [playersJoined, setPlayersJoined] = useState(channel.state.watcher_count === 2);\r\n\r\nchannel.on(\"user.watching.start\", (event) => {\r\n  setPlayersJoined(event.watcher_count === 2);\r\n});\r\n\r\n// winner\r\nconst [result, setResult] = useState({winner: \"none\", state:\"none\"})\r\nif (!playersJoined){\r\n        return <div>Waiting for other player to join</div>\r\n    }\r\n  return (\r\n    <div className='gameContainer'>\r\n\r\n      <Gamecontext.Provider value={{ board, setBoard, currAttempt, setCurrAttempt, onSelectLetter, onDelete, onEnter, correctWord, setDisabledLetters, disabledLetters, gameOver, setGameOver, }}>\r\n        <div className='game'>\r\n            {checkWin ? <Win winnerUserId={winnerUserId} winnerTempWord={winnerTempWord} winnerUsername={winnerUsername} winnerAttempt={winnerAttempt} channel={channel} />\r\n             : checkLoose ? <Loose/> \r\n             : gameOver.gameOver ? <GameOver /> : \r\n            <>\r\n            <div className='timer'>\r\n\r\n              <p>{`Time remaining: ${Math.floor(timer / 60)}:${timer % 60\r\n            .toString()\r\n            .padStart(2, '0')}`}</p>\r\n          {/* display the time remaining in minutes:seconds format */}\r\n              \r\n          </div>\r\n\r\n              <Board/>\r\n              <Keyboard/>\r\n            \r\n            \r\n            </>\r\n            }\r\n          </div>  \r\n      </Gamecontext.Provider>\r\n      <Window>\r\n        <MessageList disableDateSeparator closeReactionSelectorOnClick messageActions={[\"react\"]} hideDeletedMessages />\r\n        <MessageInput noFiles/>\r\n      </Window>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Game\r\n\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,aAAa,EAAEC,SAAS,EAAEC,UAAU,EAAEC,MAAM,QAAQ,OAAO;AACrF,SAASC,MAAM,EAAEC,WAAW,EAAEC,YAAY,EAAEC,cAAc,QAAQ,mBAAmB;AACrF,OAAO,YAAY;AACnB,OAAO,2BAA2B;AAClC,OAAO,kBAAkB;AACzB,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,QAAQ,MAAM,YAAY;AACjC,SAASC,YAAY,EAAEC,eAAe,QAAQ,SAAS;AACvD,OAAOC,SAAS,MAAM,aAAa;AACnC,SAASC,YAAY,QAAQ,aAAa;AAC1C,OAAOC,WAAW,MAAM,aAAa;AACrC,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,QAAQ,MAAM,UAAU;AAAC;AAAA;AAGhC,OAAO,MAAMC,WAAW,gBAAGnB,aAAa,EAAE;AAE1C,SAASoB,IAAI,OAAmC;EAAA;EAAA,IAAlC;IAACC,OAAO;IAAEC,YAAY;IAAEC;EAAO,CAAC;EAI5C;EACD;EACC;;EAEA;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAG1B,QAAQ,CAACW,YAAY,CAAC;EAChD,MAAM,CAACgB,WAAW,EAAEC,cAAc,CAAC,GAAG5B,QAAQ,CAAC;IAAC6B,OAAO,EAAE,CAAC;IAAEC,SAAS,EAAE;EAAC,CAAC,CAAC;EAC1E,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGhC,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACiC,QAAQ,EAAEC,WAAW,CAAC,GAAGlC,QAAQ,CAAC;IAACiC,QAAQ,EAAE,KAAK;IAAEE,WAAW,EAAE;EAAM,CAAC,CAAC;EAChF,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGrC,QAAQ,CAACuB,YAAY,CAAC;EAC5D,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGvC,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACwC,YAAY,EAAEC,eAAe,CAAC,GAAGzC,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAAC0C,cAAc,EAAEC,iBAAiB,CAAC,GAAG3C,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAAC4C,cAAc,EAAEC,iBAAiB,CAAC,GAAG7C,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAAC8C,aAAa,EAAEC,gBAAgB,CAAC,GAAG/C,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACgD,UAAU,EAAEC,aAAa,CAAC,GAAGjD,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACkD,KAAK,EAAEC,QAAQ,CAAC,GAAGnD,QAAQ,CAAC,GAAG,CAAC;EACvC,MAAM,CAACoD,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGrD,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAM,CAACsD,WAAW,EAAEC,cAAc,CAAC,GAAGvD,QAAQ,CAAC,IAAI,CAAC;EAQpD,MAAM;IAAEwD;EAAO,CAAC,GAAGhD,cAAc,EAAE;EAQnC,MAAMiD,cAAc,GAAIC,MAAM,IAAI;IAChC,IAAI/B,WAAW,CAACG,SAAS,GAAG,CAAC,EAAE;IAE/B,MAAM6B,QAAQ,GAAG,CAAC,GAAGlC,KAAK,CAAC;IAC3BkC,QAAQ,CAAChC,WAAW,CAACE,OAAO,CAAC,CAACF,WAAW,CAACG,SAAS,CAAC,GAAG4B,MAAM;IAC7DhC,QAAQ,CAACiC,QAAQ,CAAC;IAClB/B,cAAc,CAAC;MAAC,GAAGD,WAAW;MAAEG,SAAS,EAAEH,WAAW,CAACG,SAAS,GAAG;IAAC,CAAC,CAAC;EACxE,CAAC;EAED,MAAM8B,QAAQ,GAAG,MAAM;IACrB,IAAIjC,WAAW,CAACG,SAAS,KAAK,CAAC,EAAG;IAClC,MAAM6B,QAAQ,GAAG,CAAC,GAAGlC,KAAK,CAAC;IAC3BkC,QAAQ,CAAChC,WAAW,CAACE,OAAO,CAAC,CAACF,WAAW,CAACG,SAAS,GAAG,CAAC,CAAC,GAAG,EAAE;IAC7DJ,QAAQ,CAACiC,QAAQ,CAAC;IAClB/B,cAAc,CAAC;MAAE,GAAGD,WAAW;MAAEG,SAAS,EAAEH,WAAW,CAACG,SAAS,GAAE;IAAE,CAAC,CAAC;EACzE,CAAC;EAED,MAAM+B,OAAO,GAAG,MAAM;IACpB,IAAIlC,WAAW,CAACG,SAAS,KAAK,CAAC,EAAE;IACjC,IAAIgC,QAAQ,GAAG,EAAE;IACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1BD,QAAQ,IAAIrC,KAAK,CAACE,WAAW,CAACE,OAAO,CAAC,CAACkC,CAAC,CAAC;MACzCD,QAAQ,CAACE,WAAW,EAAE;IACxB;IACA,IAAIxC,OAAO,CAACyC,GAAG,CAACH,QAAQ,CAACE,WAAW,EAAE,CAAC,EAAE;MACvCpC,cAAc,CAAC;QAAEC,OAAO,EAAEF,WAAW,CAACE,OAAO,GAAG,CAAC;QAAEC,SAAS,EAAE;MAAC,CAAC,CAAC;IACnE,CAAC,MAAM;MACLoC,KAAK,CAAE,gBAAgB,CAAC;IAC1B;IAEA,IAAIJ,QAAQ,CAACK,IAAI,EAAE,CAACH,WAAW,EAAE,KAAK5B,WAAW,CAAC+B,IAAI,EAAE,CAACH,WAAW,EAAE,EAAE;MAAA;MACtE1C,OAAO,CAAC8C,WAAW,CAAC;QAClBC,IAAI,EAAG,mBAAEb,MAAM,CAACc,IAAI,iDAAX,aAAaC,IAAK,sBAAqBnC,WAAY,IAAG;QAC/DoC,YAAY,EAAE,KAAK;QACnBhC,YAAY,mBAAEgB,MAAM,CAACc,IAAI,kDAAX,cAAaG,EAAE;QAC7B7B,cAAc,EAAEkB,QAAQ;QACxBpB,cAAc,mBAAEc,MAAM,CAACc,IAAI,kDAAX,cAAaC,IAAI;QACjCzB,aAAa,EAAEnB,WAAW,CAACE;MAE7B,CAAC,CAAC;IAIJ;IACA,IAAIF,WAAW,CAACE,OAAO,KAAK,CAAC,IAAIL,OAAO,CAACyC,GAAG,CAACH,QAAQ,CAACE,WAAW,EAAE,CAAC,EAAC;MAAA;MACnE1C,OAAO,CAAC8C,WAAW,CAAC;QAClBC,IAAI,EAAG,oBAAEb,MAAM,CAACc,IAAI,kDAAX,cAAaC,IAAK,8BAA6BnC,WAAY,IAAG;QACvEoC,YAAY,EAAE;MAChB,CAAC,CAAC;MACFjB,cAAc,kBAACC,MAAM,CAACc,IAAI,kDAAX,cAAaG,EAAE,CAAC;MAC/BvC,WAAW,CAAC;QAACD,QAAQ,EAAE,IAAI;QAAEE,WAAW,EAAE;MAAK,CAAC,CAAC;IACnD;IACAuC,OAAO,CAACC,GAAG,CAACvC,WAAW,CAAC;EAC1B,CAAC;EAEDlC,SAAS,CAAC,MAAM;IACd,MAAM0E,UAAU,GAAGC,WAAW,CAAC,MAAM;MACnC1B,QAAQ,CAAE2B,SAAS,IAAK;QACtB,IAAIA,SAAS,GAAG,CAAC,EAAE;UACjB,OAAOA,SAAS,GAAG,CAAC;QACtB,CAAC,MAAM;UAAA;UACLxD,OAAO,CAAC8C,WAAW,CAAC;YAClBC,IAAI,EAAG,oBAAEb,MAAM,CAACc,IAAI,kDAAX,cAAaC,IAAK,8BAA6BnC,WAAY,IAAG;YACvEoC,YAAY,EAAE;UAChB,CAAC,CAAC;UACFjB,cAAc,kBAACC,MAAM,CAACc,IAAI,kDAAX,cAAaG,EAAE,CAAC;UAC/BM,aAAa,CAACH,UAAU,CAAC;UACzB,OAAOE,SAAS;QAClB;MACF,CAAC,CAAC;IACJ,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEV,OAAO,MAAM;MACXC,aAAa,CAACH,UAAU,CAAC;IAC3B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAON1E,SAAS,CAAC,MAAM;IACd;IACA;IACAoB,OAAO,CAAC0D,QAAQ,EAAE;EACpB,CAAC,EAAE,CAAC1D,OAAO,CAAC,CAAC;;EAQb;EACApB,SAAS,CAAC,MAAM;IAEd,MAAM+E,WAAW,GAAIC,KAAK,IAAK;MAC7B,IACEA,KAAK,CAACC,IAAI,KAAK,aAAa,IAC5BD,KAAK,CAACE,OAAO,CAACf,IAAI,CAACgB,QAAQ,CAAC,kBAAkB,CAAC,EAC/C;QACA9C,WAAW,CAAC,IAAI,CAAC;QACjBL,WAAW,CAAC;UAACD,QAAQ,EAAE,KAAK;UAAEE,WAAW,EAAE;QAAK,CAAC,CAAC;MACpD;IACF,CAAC;IAEDb,OAAO,CAACgE,EAAE,CAAC,aAAa,EAAEL,WAAW,CAAC;IACtC3D,OAAO,CAACgE,EAAE,CAAC,iBAAiB,EAAEL,WAAW,CAAC;IAE1C,OAAO,MAAM;MACX3D,OAAO,CAACiE,GAAG,CAAC,aAAa,EAAEN,WAAW,CAAC;MACvC3D,OAAO,CAACiE,GAAG,CAAC,iBAAiB,EAAEN,WAAW,CAAC;IAC7C,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EACN;;EAEA/E,SAAS,CAAC,MAAM;IAEd,IAAIsF,KAAK,GAAG,CAAC,CAAC,CAAC;;IAEf,MAAMP,WAAW,GAAIC,KAAK,IAAK;MAC7B,IACEA,KAAK,CAACC,IAAI,KAAK,aAAa,IAC5BD,KAAK,CAACE,OAAO,CAACf,IAAI,CAACgB,QAAQ,CAAC,iBAAiB,CAAC,EAC9C;QACAG,KAAK,EAAE,CAAC,CAAC;QACT,IAAIA,KAAK,KAAK,CAAC,EAAE;UACftD,WAAW,CAAC;YAACD,QAAQ,EAAE,KAAK;YAAEE,WAAW,EAAE;UAAK,CAAC,CAAC;UAClDc,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;QACvB;MACF;IACF,CAAC;;IAED3B,OAAO,CAACgE,EAAE,CAAC,aAAa,EAAEL,WAAW,CAAC;IACtC3D,OAAO,CAACgE,EAAE,CAAC,iBAAiB,EAAEL,WAAW,CAAC;IAE1C,OAAO,MAAM;MACX3D,OAAO,CAACiE,GAAG,CAAC,aAAa,EAAEN,WAAW,CAAC;MACvC3D,OAAO,CAACiE,GAAG,CAAC,iBAAiB,EAAEN,WAAW,CAAC;IAC7C,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAIN/E,SAAS,CAAC,MAAM;IACd,IAAI+B,QAAQ,CAACE,WAAW,EAAE;MACxBhB,QAAQ,CAACsE,SAAS,EAAE,CAACC,UAAU,CAAC,OAAO,CAAC,CAACC,GAAG,CAACnD,YAAY,CAAC,CAACoD,MAAM,CAAC;QAChEC,IAAI,EAAE1E,QAAQ,CAACsE,SAAS,CAACK,UAAU,CAACC,SAAS,CAAC,CAAC;MACjD,CAAC,CAAC;MACF5E,QAAQ,CAACsE,SAAS,EAAE,CAACC,UAAU,CAAC,OAAO,CAAC,CAACC,GAAG,CAACrC,WAAW,CAAC,CAACsC,MAAM,CAAC;QAC/DI,MAAM,EAAE7E,QAAQ,CAACsE,SAAS,CAACK,UAAU,CAACC,SAAS,CAAC,CAAC;MACnD,CAAC,CAAC;IACJ,CAAC,MAAM,IAAI9D,QAAQ,CAACA,QAAQ,EAAE;MAC5Bd,QAAQ,CAACsE,SAAS,EAAE,CAACC,UAAU,CAAC,OAAO,CAAC,CAACC,GAAG,CAACnD,YAAY,CAAC,CAACoD,MAAM,CAAC;QAChEI,MAAM,EAAE7E,QAAQ,CAACsE,SAAS,CAACK,UAAU,CAACC,SAAS,CAAC,CAAC;MACnD,CAAC,CAAC;MACF5E,QAAQ,CAACsE,SAAS,EAAE,CAACC,UAAU,CAAC,OAAO,CAAC,CAACC,GAAG,CAACrC,WAAW,CAAC,CAACsC,MAAM,CAAC;QAC/DI,MAAM,EAAE7E,QAAQ,CAACsE,SAAS,CAACK,UAAU,CAACC,SAAS,CAAC,CAAC;MACnD,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAAC9D,QAAQ,EAAEO,YAAY,EAAEc,WAAW,CAAC,CAAC;EAOzC,MAAM,CAAC2C,aAAa,EAAEC,gBAAgB,CAAC,GAAGlG,QAAQ,CAACsB,OAAO,CAAC6E,KAAK,CAACC,aAAa,KAAK,CAAC,CAAC;EAEvF9E,OAAO,CAACgE,EAAE,CAAC,qBAAqB,EAAGJ,KAAK,IAAK;IAC3CgB,gBAAgB,CAAChB,KAAK,CAACkB,aAAa,KAAK,CAAC,CAAC;EAC7C,CAAC,CAAC;;EAEF;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGtG,QAAQ,CAAC;IAACuG,MAAM,EAAE,MAAM;IAAEJ,KAAK,EAAC;EAAM,CAAC,CAAC;EACpE,IAAI,CAACF,aAAa,EAAC;IACX,oBAAO;MAAA,UAAK;IAAgC;MAAA;MAAA;MAAA;IAAA,QAAM;EACtD;EACF,oBACE;IAAK,SAAS,EAAC,eAAe;IAAA,wBAE5B,QAAC,WAAW,CAAC,QAAQ;MAAC,KAAK,EAAE;QAAExE,KAAK;QAAEC,QAAQ;QAAEC,WAAW;QAAEC,cAAc;QAAE6B,cAAc;QAAEG,QAAQ;QAAEC,OAAO;QAAEzB,WAAW;QAAEJ,kBAAkB;QAAED,eAAe;QAAEE,QAAQ;QAAEC;MAAa,CAAE;MAAA,uBACzL;QAAK,SAAS,EAAC,MAAM;QAAA,UAChBI,QAAQ,gBAAG,QAAC,GAAG;UAAC,YAAY,EAAEE,YAAa;UAAC,cAAc,EAAEI,cAAe;UAAC,cAAc,EAAEF,cAAe;UAAC,aAAa,EAAEI,aAAc;UAAC,OAAO,EAAExB;QAAQ;UAAA;UAAA;UAAA;QAAA,QAAG,GAC5J0B,UAAU,gBAAG,QAAC,KAAK;UAAA;UAAA;UAAA;QAAA,QAAE,GACrBf,QAAQ,CAACA,QAAQ,gBAAG,QAAC,QAAQ;UAAA;UAAA;UAAA;QAAA,QAAG,gBACnC;UAAA,wBACA;YAAK,SAAS,EAAC,OAAO;YAAA,uBAEpB;cAAA,UAAK,mBAAkBuE,IAAI,CAACC,KAAK,CAACvD,KAAK,GAAG,EAAE,CAAE,IAAGA,KAAK,GAAG,EAAE,EAC5DwD,QAAQ,EAAE,CACVC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE;YAAC;cAAA;cAAA;cAAA;YAAA;UAAK;YAAA;YAAA;YAAA;UAAA,QAGpB,eAEF,QAAC,KAAK;YAAA;YAAA;YAAA;UAAA,QAAE,eACR,QAAC,QAAQ;YAAA;YAAA;YAAA;UAAA,QAAE;QAAA;MAGV;QAAA;QAAA;QAAA;MAAA;IAEC;MAAA;MAAA;MAAA;IAAA,QACa,eACvB,QAAC,MAAM;MAAA,wBACL,QAAC,WAAW;QAAC,oBAAoB;QAAC,4BAA4B;QAAC,cAAc,EAAE,CAAC,OAAO,CAAE;QAAC,mBAAmB;MAAA;QAAA;QAAA;QAAA;MAAA,QAAG,eAChH,QAAC,YAAY;QAAC,OAAO;MAAA;QAAA;QAAA;QAAA;MAAA,QAAE;IAAA;MAAA;MAAA;MAAA;IAAA,QAChB;EAAA;IAAA;IAAA;IAAA;EAAA,QAEL;AAEV;AAAC,GA1PQtF,IAAI;EAAA,QA8BQb,cAAc;AAAA;AAAA,KA9B1Ba,IAAI;AA4Pb,eAAeA,IAAI;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}