{"ast":null,"code":"var _jsxFileName = \"E:\\\\Prog stuff\\\\OGame\\\\frontend\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, createContext, useEffect, useContext, useRef } from 'react';\nimport { Window, MessageList, MessageInput, useChatContext } from 'stream-chat-react';\nimport './Chat.css';\nimport './Components.css';\nimport Board from './Board';\nimport Keyboard from './Keyboard';\nimport { boardDefault, generateWordSet } from './Words';\nimport WordInput from './WordInput';\nimport { Inputcontext } from './WordInput';\nimport wordleInput from './WordInput';\nimport GameOver from './GameOver';\nimport Win from './Win';\nimport Loose from './Loose';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Gamecontext = /*#__PURE__*/createContext();\nfunction Game(_ref) {\n  _s();\n  let {\n    channel,\n    selectedWord,\n    wordSet\n  } = _ref;\n  //popup\n  // const [showWordInput, setShowWordInput] = useState(true)\n  // input for wordle\n\n  //wordle\n  const [board, setBoard] = useState(boardDefault);\n  const [currAttempt, setCurrAttempt] = useState({\n    attempt: 0,\n    letterPos: 0\n  });\n  const [disabledLetters, setDisabledLetters] = useState([]);\n  const [gameOver, setGameOver] = useState({\n    gameOver: false,\n    guessedWord: false\n  });\n  const [correctWord, setCorrectWord] = useState(selectedWord);\n  const [checkWin, setCheckWin] = useState(false);\n  const [winnerUserId, setWinnerUserId] = useState(null);\n  const [winnerUsername, setWinnerUsername] = useState(\"\");\n  const [winnerTempWord, setWinnerTempWord] = useState(\"\");\n  const [winnerAttempt, setWinnerAttempt] = useState(\"\");\n  const [checkLoose, setCheckLoose] = useState(false);\n  const [timer, setTimer] = useState(320);\n\n  //db\n  const [win, setWin] = useState(false);\n  const [loss, setLoss] = useState(false);\n  const [userId, setUserId] = useState(null);\n  const {\n    client\n  } = useChatContext();\n  const onSelectLetter = keyVal => {\n    if (currAttempt.letterPos > 4) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letterPos] = keyVal;\n    setBoard(newBoard);\n    setCurrAttempt({\n      ...currAttempt,\n      letterPos: currAttempt.letterPos + 1\n    });\n  };\n  const onDelete = () => {\n    if (currAttempt.letterPos === 0) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letterPos - 1] = \"\";\n    setBoard(newBoard);\n    setCurrAttempt({\n      ...currAttempt,\n      letterPos: currAttempt.letterPos - 1\n    });\n  };\n  const onEnter = () => {\n    if (currAttempt.letterPos !== 5) return;\n    let currWord = \"\";\n    for (let i = 0; i < 5; i++) {\n      currWord += board[currAttempt.attempt][i];\n      currWord.toLowerCase();\n    }\n    if (wordSet.has(currWord.toLowerCase())) {\n      setCurrAttempt({\n        attempt: currAttempt.attempt + 1,\n        letterPos: 0\n      });\n    } else {\n      alert(\"Word not found\");\n    }\n    if (currWord.trim().toLowerCase() === correctWord.trim().toLowerCase()) {\n      var _client$user, _client$user2, _client$user3, _client$user4;\n      channel.sendMessage({\n        text: `${(_client$user = client.user) === null || _client$user === void 0 ? void 0 : _client$user.name} guessed the word \"${correctWord}\"!`,\n        message_type: 'win',\n        winnerUserId: (_client$user2 = client.user) === null || _client$user2 === void 0 ? void 0 : _client$user2.id,\n        winnerTempWord: currWord,\n        winnerUsername: (_client$user3 = client.user) === null || _client$user3 === void 0 ? void 0 : _client$user3.name,\n        winnerAttempt: currAttempt.attempt\n      });\n      addStatsToDatabase((_client$user4 = client.user) === null || _client$user4 === void 0 ? void 0 : _client$user4.id, true);\n    }\n    if (currAttempt.attempt === 5 && wordSet.has(currWord.toLowerCase())) {\n      var _client$user5, _client$user6;\n      channel.sendMessage({\n        text: `${(_client$user5 = client.user) === null || _client$user5 === void 0 ? void 0 : _client$user5.name} failed to guess the word \"${correctWord}\"!`,\n        message_type: 'loose'\n      });\n      setGameOver({\n        gameOver: true,\n        guessedWord: false\n      });\n      addStatsToDatabase((_client$user6 = client.user) === null || _client$user6 === void 0 ? void 0 : _client$user6.id, false);\n    }\n    console.log(correctWord);\n  };\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setTimer(prevTimer => {\n        if (prevTimer > 0) {\n          return prevTimer - 1;\n        } else {\n          var _client$user7, _client$user8;\n          channel.sendMessage({\n            text: `${(_client$user7 = client.user) === null || _client$user7 === void 0 ? void 0 : _client$user7.name} failed to guess the word \"${correctWord}\"!`,\n            message_type: 'loose'\n          });\n          addStatsToDatabase((_client$user8 = client.user) === null || _client$user8 === void 0 ? void 0 : _client$user8.id, false);\n          clearInterval(intervalId);\n          return prevTimer;\n        }\n      });\n    }, 1000); // 1000ms = 1 second\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n  const addStatsToDatabase = async (userId, win) => {\n    try {\n      const response = await axios.post('http://localhost:3001/addStats', {\n        userId,\n        win\n      });\n      console.log(response.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    // This effect will run when the component mounts or when a new game is created\n    // and will clear the messages in the channel\n    channel.truncate();\n  }, [channel]);\n\n  //checkwin\n  useEffect(() => {\n    const handleEvent = event => {\n      if (event.type === \"message.new\" && event.message.text.includes(\"guessed the word\")) {\n        setCheckWin(true);\n        setGameOver({\n          gameOver: false,\n          guessedWord: false\n        });\n      }\n    };\n    channel.on(\"message.new\", handleEvent);\n    channel.on(\"message.updated\", handleEvent);\n    return () => {\n      channel.off(\"message.new\", handleEvent);\n      channel.off(\"message.updated\", handleEvent);\n    };\n  }, []);\n  // checkloose\n\n  useEffect(() => {\n    let count = 0; // initialize a counter variable\n\n    const handleEvent = event => {\n      if (event.type === \"message.new\" && event.message.text.includes(\"failed to guess\")) {\n        count++; // increment the counter\n        if (count === 2) {\n          setGameOver({\n            gameOver: false,\n            guessedWord: false\n          });\n          setCheckLoose(true);\n        }\n      }\n    };\n    channel.on(\"message.new\", handleEvent);\n    channel.on(\"message.updated\", handleEvent);\n    return () => {\n      channel.off(\"message.new\", handleEvent);\n      channel.off(\"message.updated\", handleEvent);\n    };\n  }, []);\n  const [playersJoined, setPlayersJoined] = useState(channel.state.watcher_count === 2);\n  channel.on(\"user.watching.start\", event => {\n    setPlayersJoined(event.watcher_count === 2);\n  });\n\n  // winner\n  const [result, setResult] = useState({\n    winner: \"none\",\n    state: \"none\"\n  });\n  if (!playersJoined) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Waiting for other player to join\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameContainer\",\n    children: [checkWin ? /*#__PURE__*/_jsxDEV(Win, {\n      winnerUserId: winnerUserId,\n      winnerTempWord: winnerTempWord,\n      winnerUsername: winnerUsername,\n      winnerAttempt: winnerAttempt,\n      channel: channel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 11\n    }, this) : checkLoose ? /*#__PURE__*/_jsxDEV(Loose, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: `Time remaining: ${Math.floor(timer / 60)}:${timer % 60 .toString().padStart(2, '0')}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 13\n      }, this)\n    }, void 0, false), !checkWin && !checkLoose && timer === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Time's up!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 11\n    }, this), !checkWin && !checkLoose && timer > 0 && /*#__PURE__*/_jsxDEV(Gamecontext.Provider, {\n      value: {\n        board,\n        setBoard,\n        currAttempt,\n        setCurrAttempt,\n        onSelectLetter,\n        onDelete,\n        onEnter,\n        correctWord,\n        setDisabledLetters,\n        disabledLetters,\n        gameOver,\n        setGameOver\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game\",\n        children: [/*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Keyboard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Window, {\n      children: [/*#__PURE__*/_jsxDEV(MessageList, {\n        disableDateSeparator: true,\n        closeReactionSelectorOnClick: true,\n        messageActions: ['react'],\n        hideDeletedMessages: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n        noFiles: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 7\n  }, this);\n}\n_s(Game, \"UY/Y7wnYISz2sJNWJ8zTqZRACqI=\", false, function () {\n  return [useChatContext];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","createContext","useEffect","useContext","useRef","Window","MessageList","MessageInput","useChatContext","Board","Keyboard","boardDefault","generateWordSet","WordInput","Inputcontext","wordleInput","GameOver","Win","Loose","axios","Gamecontext","Game","channel","selectedWord","wordSet","board","setBoard","currAttempt","setCurrAttempt","attempt","letterPos","disabledLetters","setDisabledLetters","gameOver","setGameOver","guessedWord","correctWord","setCorrectWord","checkWin","setCheckWin","winnerUserId","setWinnerUserId","winnerUsername","setWinnerUsername","winnerTempWord","setWinnerTempWord","winnerAttempt","setWinnerAttempt","checkLoose","setCheckLoose","timer","setTimer","win","setWin","loss","setLoss","userId","setUserId","client","onSelectLetter","keyVal","newBoard","onDelete","onEnter","currWord","i","toLowerCase","has","alert","trim","sendMessage","text","user","name","message_type","id","addStatsToDatabase","console","log","intervalId","setInterval","prevTimer","clearInterval","response","post","data","error","truncate","handleEvent","event","type","message","includes","on","off","count","playersJoined","setPlayersJoined","state","watcher_count","result","setResult","winner","Math","floor","toString","padStart"],"sources":["E:/Prog stuff/OGame/frontend/src/components/Game.js"],"sourcesContent":["import React, { useState, createContext, useEffect, useContext, useRef } from 'react'\r\nimport { Window, MessageList, MessageInput, useChatContext } from 'stream-chat-react'\r\nimport './Chat.css';\r\n\r\nimport './Components.css';\r\nimport Board from './Board';\r\nimport Keyboard from './Keyboard';\r\nimport { boardDefault, generateWordSet } from './Words';\r\nimport WordInput from './WordInput';\r\nimport { Inputcontext } from './WordInput';\r\nimport wordleInput from './WordInput';\r\nimport GameOver from './GameOver';\r\nimport Win from './Win';\r\nimport Loose from './Loose';\r\nimport axios from 'axios';\r\n\r\n\r\nexport const Gamecontext = createContext();\r\n\r\nfunction Game({channel, selectedWord, wordSet}) {\r\n\r\n\r\n\r\n  //popup\r\n // const [showWordInput, setShowWordInput] = useState(true)\r\n  // input for wordle\r\n\r\n  //wordle\r\n  const [board, setBoard] = useState(boardDefault);\r\n  const [currAttempt, setCurrAttempt] = useState({attempt: 0, letterPos: 0});\r\n  const [disabledLetters, setDisabledLetters] = useState([]);\r\n  const [gameOver, setGameOver] = useState({gameOver: false, guessedWord: false,});\r\n  const [correctWord, setCorrectWord] = useState(selectedWord);\r\n  const [checkWin, setCheckWin] = useState(false);\r\n  const [winnerUserId, setWinnerUserId] = useState(null);\r\n  const [winnerUsername, setWinnerUsername] = useState(\"\");\r\n  const [winnerTempWord, setWinnerTempWord] = useState(\"\");\r\n  const [winnerAttempt, setWinnerAttempt] = useState(\"\");\r\n  const [checkLoose, setCheckLoose] = useState(false);\r\n  const [timer, setTimer] = useState(320);\r\n\r\n  //db\r\n  const [win, setWin] = useState(false);\r\n  const [loss, setLoss] = useState(false);\r\n  const [userId, setUserId] = useState(null);\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const { client } = useChatContext();\r\n\r\n\r\n\r\n\r\n\r\n  \r\n\r\n  const onSelectLetter = (keyVal) =>{\r\n    if (currAttempt.letterPos > 4) return;\r\n\r\n    const newBoard = [...board];\r\n    newBoard[currAttempt.attempt][currAttempt.letterPos] = keyVal;\r\n    setBoard(newBoard);\r\n    setCurrAttempt({...currAttempt, letterPos: currAttempt.letterPos + 1});\r\n  }\r\n\r\n  const onDelete = () => {\r\n    if (currAttempt.letterPos === 0 ) return; \r\n    const newBoard = [...board];\r\n    newBoard[currAttempt.attempt][currAttempt.letterPos - 1] = \"\";\r\n    setBoard(newBoard)\r\n    setCurrAttempt({ ...currAttempt, letterPos: currAttempt.letterPos -1 });\r\n  }\r\n\r\n  const onEnter = () => {\r\n    if (currAttempt.letterPos !== 5) return;\r\n    let currWord = \"\";\r\n    for (let i = 0; i < 5; i++) {\r\n      currWord += board[currAttempt.attempt][i];\r\n      currWord.toLowerCase()\r\n    }\r\n    if (wordSet.has(currWord.toLowerCase())) {\r\n      setCurrAttempt({ attempt: currAttempt.attempt + 1, letterPos: 0});\r\n    } else {\r\n      alert (\"Word not found\")\r\n    }\r\n\r\n    if (currWord.trim().toLowerCase() === correctWord.trim().toLowerCase()) {\r\n      channel.sendMessage({\r\n        text: `${client.user?.name} guessed the word \"${correctWord}\"!`,\r\n        message_type: 'win',\r\n        winnerUserId: client.user?.id,\r\n        winnerTempWord: currWord,\r\n        winnerUsername: client.user?.name,\r\n        winnerAttempt: currAttempt.attempt\r\n        \r\n      });\r\n      addStatsToDatabase(client.user?.id, true);\r\n\r\n\r\n    }\r\n    if (currAttempt.attempt === 5 && wordSet.has(currWord.toLowerCase())){\r\n      channel.sendMessage({\r\n        text: `${client.user?.name} failed to guess the word \"${correctWord}\"!`,\r\n        message_type: 'loose'\r\n      })\r\n      setGameOver({gameOver: true, guessedWord: false});\r\n      addStatsToDatabase(client.user?.id, false);\r\n    }\r\n\r\n    console.log(correctWord);\r\n\r\n  };\r\n\r\n\r\n   \r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      setTimer((prevTimer) => {\r\n        if (prevTimer > 0) {\r\n          return prevTimer - 1;\r\n        } else {\r\n          channel.sendMessage({\r\n            text: `${client.user?.name} failed to guess the word \"${correctWord}\"!`,\r\n            message_type: 'loose'\r\n          })\r\n          addStatsToDatabase(client.user?.id, false);\r\n          clearInterval(intervalId);\r\n          return prevTimer;\r\n        }\r\n      });\r\n    }, 1000); // 1000ms = 1 second\r\n\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);\r\n\r\n\r\n\r\n  const addStatsToDatabase = async (userId, win) => {\r\n    try {\r\n      const response = await axios.post('http://localhost:3001/addStats', { userId, win });\r\n      console.log(response.data);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    // This effect will run when the component mounts or when a new game is created\r\n    // and will clear the messages in the channel\r\n    channel.truncate();\r\n  }, [channel]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  //checkwin\r\n  useEffect(() => {\r\n\r\n    const handleEvent = (event) => {\r\n      if (\r\n        event.type === \"message.new\" &&\r\n        event.message.text.includes(\"guessed the word\")\r\n      ) {\r\n        setCheckWin(true);\r\n        setGameOver({gameOver: false, guessedWord: false});\r\n      }\r\n    };\r\n\r\n    channel.on(\"message.new\", handleEvent);\r\n    channel.on(\"message.updated\", handleEvent);\r\n\r\n    return () => {\r\n      channel.off(\"message.new\", handleEvent);\r\n      channel.off(\"message.updated\", handleEvent);\r\n    };\r\n  }, []);\r\n  // checkloose\r\n \r\n  useEffect(() => {\r\n\r\n    let count = 0; // initialize a counter variable\r\n  \r\n    const handleEvent = (event) => {\r\n      if (\r\n        event.type === \"message.new\" &&\r\n        event.message.text.includes(\"failed to guess\")\r\n      ) {\r\n        count++; // increment the counter\r\n        if (count === 2) {\r\n          setGameOver({gameOver: false, guessedWord: false});\r\n          setCheckLoose(true);\r\n        }\r\n      }\r\n    };\r\n  \r\n    channel.on(\"message.new\", handleEvent);\r\n    channel.on(\"message.updated\", handleEvent);\r\n  \r\n    return () => {\r\n      channel.off(\"message.new\", handleEvent);\r\n      channel.off(\"message.updated\", handleEvent);\r\n    };\r\n  }, []);\r\n\r\n\r\n\r\n\r\n\r\n  \r\n  \r\n\r\n\r\n\r\n  const [playersJoined, setPlayersJoined] = useState(channel.state.watcher_count === 2);\r\n\r\nchannel.on(\"user.watching.start\", (event) => {\r\n  setPlayersJoined(event.watcher_count === 2);\r\n});\r\n\r\n// winner\r\nconst [result, setResult] = useState({winner: \"none\", state:\"none\"})\r\nif (!playersJoined){\r\n        return <div>Waiting for other player to join</div>\r\n    }\r\n    return (\r\n      <div className='gameContainer'>\r\n\r\n        {checkWin ? (\r\n          <Win winnerUserId={winnerUserId} winnerTempWord={winnerTempWord} winnerUsername={winnerUsername} winnerAttempt={winnerAttempt} channel={channel} />\r\n        ) : checkLoose ? (\r\n          <Loose />\r\n        ) : (\r\n          <>\r\n            <p>{`Time remaining: ${Math.floor(timer / 60)}:${timer % 60\r\n              .toString()\r\n              .padStart(2, '0')}`}</p>\r\n            {/* display the time remaining in minutes:seconds format */}\r\n          </>\r\n        )}\r\n        {!checkWin && !checkLoose && timer === 0 && (\r\n          <div>\r\n            <p>Time's up!</p>\r\n          </div>\r\n        )}\r\n        {!checkWin && !checkLoose && timer > 0 && (\r\n          <Gamecontext.Provider value={{ board, setBoard, currAttempt, setCurrAttempt, onSelectLetter, onDelete, onEnter, correctWord, setDisabledLetters, disabledLetters, gameOver, setGameOver }}>\r\n            <div className='game'>\r\n              <Board />\r\n              <Keyboard />\r\n            </div>\r\n          </Gamecontext.Provider>\r\n        )}\r\n        <Window>\r\n          <MessageList disableDateSeparator closeReactionSelectorOnClick messageActions={['react']} hideDeletedMessages />\r\n          <MessageInput noFiles />\r\n        </Window>\r\n      </div>\r\n    );\r\n    }\r\n    \r\n    export default Game\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}