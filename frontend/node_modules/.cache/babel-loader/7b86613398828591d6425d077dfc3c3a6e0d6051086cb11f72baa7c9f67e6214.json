{"ast":null,"code":"var _jsxFileName = \"E:\\\\Prog stuff\\\\OGame-wordle\\\\OGame-Wordle\\\\frontend\\\\src\\\\components\\\\Game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, createContext, useEffect } from 'react';\nimport { Window, MessageList, MessageInput, useChatContext } from 'stream-chat-react';\nimport './Chat.css';\nimport './Components.css';\nimport Board from './Board';\nimport Keyboard from './Keyboard';\nimport { boardDefault } from './Words';\nimport Win from './Win';\nimport Loose from './Loose';\nimport axios from 'axios';\n\n// createContext() for game-related state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Gamecontext = /*#__PURE__*/createContext();\n\n// Main Game component\nfunction Game(_ref) {\n  _s();\n  let {\n    channel,\n    selectedWord,\n    wordSet\n  } = _ref;\n  //wordle\n  const [board, setBoard] = useState(boardDefault);\n  const [currAttempt, setCurrAttempt] = useState({\n    attempt: 0,\n    letterPos: 0\n  });\n  const [disabledLetters, setDisabledLetters] = useState([]);\n  const [gameOver, setGameOver] = useState({\n    gameOver: false,\n    guessedWord: false\n  });\n  const [correctWord, setCorrectWord] = useState(selectedWord);\n  const [checkWin, setCheckWin] = useState(false);\n  const [winnerUserId, setWinnerUserId] = useState(null);\n  const [winnerUsername, setWinnerUsername] = useState(\"\");\n  const [winnerTempWord, setWinnerTempWord] = useState(\"\");\n  const [winnerAttempt, setWinnerAttempt] = useState(\"\");\n  const [checkLoose, setCheckLoose] = useState(false);\n  const looseElo = Math.floor(Math.random() * 21) + 20;\n  const winElo = Math.floor(Math.random() * 11) + 5;\n  // useChatContext hook for client\n  const {\n    client\n  } = useChatContext();\n\n  // onSelectLetter function for keyboard input\n  const onSelectLetter = keyVal => {\n    if (currAttempt.letterPos > 4) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letterPos] = keyVal;\n    setBoard(newBoard);\n    setCurrAttempt({\n      ...currAttempt,\n      letterPos: currAttempt.letterPos + 1\n    });\n  };\n  const onDelete = () => {\n    if (currAttempt.letterPos === 0) return; // If letterPos is already 0, there is nothing to delete, so just return\n    const newBoard = [...board]; // Make a copy of the board\n    newBoard[currAttempt.attempt][currAttempt.letterPos - 1] = \"\"; // Delete the letter at the current attempt and position\n    setBoard(newBoard); // Update the board with the new copy\n    setCurrAttempt({\n      ...currAttempt,\n      letterPos: currAttempt.letterPos - 1\n    }); // Move the cursor back by one position\n  };\n\n  const onEnter = () => {\n    if (currAttempt.letterPos !== 5) return; // If the cursor is not at position 5, do nothing\n    let currWord = \"\";\n    for (let i = 0; i < 5; i++) {\n      currWord += board[currAttempt.attempt][i];\n      currWord.toLowerCase();\n    }\n    if (wordSet.has(currWord.toLowerCase())) {\n      setCurrAttempt({\n        attempt: currAttempt.attempt + 1,\n        letterPos: 0\n      });\n    } else {\n      alert(\"Word not found\");\n    }\n    if (currWord.trim().toLowerCase() === correctWord.trim().toLowerCase()) {\n      var _client$user, _client$user2, _client$user3, _client$user4;\n      channel.sendMessage({\n        text: `${(_client$user = client.user) === null || _client$user === void 0 ? void 0 : _client$user.name} guessed the word \"${correctWord}\"!`,\n        message_type: 'win',\n        winnerUserId: (_client$user2 = client.user) === null || _client$user2 === void 0 ? void 0 : _client$user2.id,\n        winnerTempWord: currWord,\n        winnerUsername: (_client$user3 = client.user) === null || _client$user3 === void 0 ? void 0 : _client$user3.name,\n        winnerAttempt: currAttempt.attempt\n      });\n      addStatsToDatabase((_client$user4 = client.user) === null || _client$user4 === void 0 ? void 0 : _client$user4.id, true);\n    }\n    if (currAttempt.attempt === 5 && wordSet.has(currWord.toLowerCase())) {\n      var _client$user5, _client$user6;\n      channel.sendMessage({\n        text: `${(_client$user5 = client.user) === null || _client$user5 === void 0 ? void 0 : _client$user5.name} failed to guess the word \"${correctWord}\"!`,\n        message_type: 'loose'\n      });\n      setGameOver({\n        gameOver: true,\n        guessedWord: false\n      });\n      addStatsToDatabase((_client$user6 = client.user) === null || _client$user6 === void 0 ? void 0 : _client$user6.id, false);\n    }\n  };\n  const addStatsToDatabase = async (userId, win) => {\n    try {\n      const response = await axios.post('http://localhost:3001/addStats', {\n        userId,\n        win,\n        looseElo,\n        winElo\n      });\n      console.log(response.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    // This effect will run when the component mounts or when a new game is created\n    // and will clear the messages in the channel\n    channel.truncate();\n  }, [channel]);\n\n  //checkwin\n  useEffect(() => {\n    const handleEvent = event => {\n      if (event.type === \"message.new\" && event.message.text.includes(\"guessed the word\")) {\n        var _client$user7;\n        const winnerUserId = event.message.winnerUserId;\n        const winnerTempWord = event.message.winnerTempWord;\n        const winnerUsername = event.message.winnerUsername;\n        const winnerAttempt = event.message.winnerAttempt;\n        setCheckWin(true);\n        setWinnerUserId(winnerUserId);\n        setWinnerTempWord(winnerTempWord);\n        setWinnerUsername(winnerUsername);\n        setWinnerAttempt(winnerAttempt);\n\n        // Check if the current user won or lost the game\n        if (winnerUserId === ((_client$user7 = client.user) === null || _client$user7 === void 0 ? void 0 : _client$user7.id)) {\n          var _client$user8;\n          addStatsToDatabase((_client$user8 = client.user) === null || _client$user8 === void 0 ? void 0 : _client$user8.id, true);\n        } else {\n          var _client$user9;\n          addStatsToDatabase((_client$user9 = client.user) === null || _client$user9 === void 0 ? void 0 : _client$user9.id, false);\n        }\n      }\n    };\n    channel.on(\"message.new\", handleEvent);\n    channel.on(\"message.updated\", handleEvent);\n    return () => {\n      channel.off(\"message.new\", handleEvent);\n      channel.off(\"message.updated\", handleEvent);\n    };\n  }, []);\n\n  // checkloose\n  useEffect(() => {\n    let count = 0; // initialize a counter variable\n\n    const handleEvent = event => {\n      if (event.type === \"message.new\" && event.message.text.includes(\"failed to guess\")) {\n        count++; // increment the counter\n        if (count === 2) {\n          setGameOver({\n            gameOver: false,\n            guessedWord: false\n          });\n          setCheckLoose(true);\n        }\n      }\n    };\n    channel.on(\"message.new\", handleEvent);\n    channel.on(\"message.updated\", handleEvent);\n    return () => {\n      channel.off(\"message.new\", handleEvent);\n      channel.off(\"message.updated\", handleEvent);\n    };\n  }, []);\n  const [playersJoined, setPlayersJoined] = useState(channel.state.watcher_count === 2);\n  channel.on(\"user.watching.start\", event => {\n    //makes the wordle game begin\n\n    setPlayersJoined(event.watcher_count === 2);\n  });\n\n  //not enough players joined\n  if (!playersJoined) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"waiting\",\n      children: \"Waiting for other player to join\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameContainer bg-gray-800\",\n    children: [checkWin ? /*#__PURE__*/_jsxDEV(Win, {\n      winnerUserId: winnerUserId,\n      winnerTempWord: winnerTempWord,\n      winnerUsername: winnerUsername,\n      winnerAttempt: winnerAttempt,\n      channel: channel,\n      selectedWord: selectedWord,\n      looseElo: looseElo,\n      winElo: winElo,\n      client: client\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 11\n    }, this) : checkLoose ? /*#__PURE__*/_jsxDEV(Loose, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 11\n    }, this) : null, !checkWin && !checkLoose && /*#__PURE__*/_jsxDEV(Gamecontext.Provider, {\n      value: {\n        board,\n        setBoard,\n        currAttempt,\n        setCurrAttempt,\n        onSelectLetter,\n        onDelete,\n        onEnter,\n        correctWord,\n        setDisabledLetters,\n        disabledLetters,\n        gameOver,\n        setGameOver\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game\",\n        children: [/*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Keyboard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Window, {\n      children: [/*#__PURE__*/_jsxDEV(MessageList, {\n        disableDateSeparator: true,\n        closeReactionSelectorOnClick: true,\n        messageActions: ['react'],\n        hideDeletedMessages: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n        noFiles: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 7\n  }, this);\n}\n_s(Game, \"EAfd4PrHSLn/NYb/0y0JAUZ4vGQ=\", false, function () {\n  return [useChatContext];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","createContext","useEffect","Window","MessageList","MessageInput","useChatContext","Board","Keyboard","boardDefault","Win","Loose","axios","Gamecontext","Game","channel","selectedWord","wordSet","board","setBoard","currAttempt","setCurrAttempt","attempt","letterPos","disabledLetters","setDisabledLetters","gameOver","setGameOver","guessedWord","correctWord","setCorrectWord","checkWin","setCheckWin","winnerUserId","setWinnerUserId","winnerUsername","setWinnerUsername","winnerTempWord","setWinnerTempWord","winnerAttempt","setWinnerAttempt","checkLoose","setCheckLoose","looseElo","Math","floor","random","winElo","client","onSelectLetter","keyVal","newBoard","onDelete","onEnter","currWord","i","toLowerCase","has","alert","trim","sendMessage","text","user","name","message_type","id","addStatsToDatabase","userId","win","response","post","console","log","data","error","truncate","handleEvent","event","type","message","includes","on","off","count","playersJoined","setPlayersJoined","state","watcher_count"],"sources":["E:/Prog stuff/OGame-wordle/OGame-Wordle/frontend/src/components/Game.jsx"],"sourcesContent":["import React, { useState, createContext, useEffect} from 'react'\r\nimport { Window, MessageList, MessageInput, useChatContext } from 'stream-chat-react'\r\nimport './Chat.css';\r\nimport './Components.css';\r\nimport Board from './Board';\r\nimport Keyboard from './Keyboard';\r\nimport { boardDefault } from './Words';\r\nimport Win from './Win';\r\nimport Loose from './Loose';\r\nimport axios from 'axios';\r\n\r\n// createContext() for game-related state\r\nexport const Gamecontext = createContext();\r\n\r\n// Main Game component\r\nfunction Game({channel, selectedWord, wordSet}) {\r\n\r\n  //wordle\r\n  const [board, setBoard] = useState(boardDefault);\r\n  const [currAttempt, setCurrAttempt] = useState({attempt: 0, letterPos: 0});\r\n  const [disabledLetters, setDisabledLetters] = useState([]);\r\n  const [gameOver, setGameOver] = useState({gameOver: false, guessedWord: false,});\r\n  const [correctWord, setCorrectWord] = useState(selectedWord);\r\n  const [checkWin, setCheckWin] = useState(false);\r\n  const [winnerUserId, setWinnerUserId] = useState(null);\r\n  const [winnerUsername, setWinnerUsername] = useState(\"\");\r\n  const [winnerTempWord, setWinnerTempWord] = useState(\"\");\r\n  const [winnerAttempt, setWinnerAttempt] = useState(\"\");\r\n  const [checkLoose, setCheckLoose] = useState(false);\r\n  const looseElo = Math.floor(Math.random() * 21) + 20;\r\n  const winElo = Math.floor(Math.random() * 11) + 5;\r\n  // useChatContext hook for client\r\n  const { client } = useChatContext();\r\n\r\n  // onSelectLetter function for keyboard input\r\n  const onSelectLetter = (keyVal) =>{\r\n    if (currAttempt.letterPos > 4) return;\r\n\r\n    const newBoard = [...board];\r\n    newBoard[currAttempt.attempt][currAttempt.letterPos] = keyVal;\r\n    setBoard(newBoard);\r\n    setCurrAttempt({...currAttempt, letterPos: currAttempt.letterPos + 1});\r\n  }\r\n\r\n  const onDelete = () => {\r\n    if (currAttempt.letterPos === 0 ) return; // If letterPos is already 0, there is nothing to delete, so just return\r\n    const newBoard = [...board]; // Make a copy of the board\r\n    newBoard[currAttempt.attempt][currAttempt.letterPos - 1] = \"\"; // Delete the letter at the current attempt and position\r\n    setBoard(newBoard) // Update the board with the new copy\r\n    setCurrAttempt({ ...currAttempt, letterPos: currAttempt.letterPos -1 }); // Move the cursor back by one position\r\n  }\r\n  \r\n  const onEnter = () => {\r\n    if (currAttempt.letterPos !== 5) return; // If the cursor is not at position 5, do nothing\r\n    let currWord = \"\";\r\n    for (let i = 0; i < 5; i++) {\r\n      currWord += board[currAttempt.attempt][i];\r\n      currWord.toLowerCase()\r\n    }\r\n    if (wordSet.has(currWord.toLowerCase())) {\r\n      setCurrAttempt({ attempt: currAttempt.attempt + 1, letterPos: 0});\r\n    } else {\r\n      alert (\"Word not found\")\r\n    }\r\n  \r\n    if (currWord.trim().toLowerCase() === correctWord.trim().toLowerCase()) {\r\n      channel.sendMessage({\r\n        text: `${client.user?.name} guessed the word \"${correctWord}\"!`,\r\n        message_type: 'win',\r\n        winnerUserId: client.user?.id,\r\n        winnerTempWord: currWord,\r\n        winnerUsername: client.user?.name,\r\n        winnerAttempt: currAttempt.attempt\r\n      });\r\n      addStatsToDatabase(client.user?.id, true);\r\n    }\r\n    if (currAttempt.attempt === 5 && wordSet.has(currWord.toLowerCase())){\r\n      channel.sendMessage({\r\n        text: `${client.user?.name} failed to guess the word \"${correctWord}\"!`,\r\n        message_type: 'loose'\r\n      })\r\n      setGameOver({gameOver: true, guessedWord: false});\r\n      addStatsToDatabase(client.user?.id, false);\r\n    }\r\n  \r\n  \r\n  };\r\n  \r\n  const addStatsToDatabase = async (userId, win) => {\r\n    try {\r\n      const response = await axios.post('http://localhost:3001/addStats', { userId, win, looseElo, winElo });\r\n      console.log(response.data);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  \r\n  useEffect(() => {\r\n    // This effect will run when the component mounts or when a new game is created\r\n    // and will clear the messages in the channel\r\n    channel.truncate();\r\n  }, [channel]);\r\n  \r\n  //checkwin\r\n  useEffect(() => {\r\n    const handleEvent = (event) => {\r\n      if (event.type === \"message.new\" && event.message.text.includes(\"guessed the word\")) {\r\n        const winnerUserId = event.message.winnerUserId;\r\n        const winnerTempWord = event.message.winnerTempWord;\r\n        const winnerUsername = event.message.winnerUsername;\r\n        const winnerAttempt = event.message.winnerAttempt;\r\n        \r\n        setCheckWin(true);\r\n        setWinnerUserId(winnerUserId);\r\n        setWinnerTempWord(winnerTempWord);\r\n        setWinnerUsername(winnerUsername);\r\n        setWinnerAttempt(winnerAttempt);\r\n        \r\n        // Check if the current user won or lost the game\r\n        if (winnerUserId === client.user?.id) {\r\n          addStatsToDatabase(client.user?.id, true);\r\n        } else {\r\n          addStatsToDatabase(client.user?.id, false);\r\n        }\r\n      }\r\n    };\r\n    \r\n    \r\n\r\n    channel.on(\"message.new\", handleEvent);\r\n    channel.on(\"message.updated\", handleEvent);\r\n  \r\n    return () => {\r\n      channel.off(\"message.new\", handleEvent);\r\n      channel.off(\"message.updated\", handleEvent);\r\n    };\r\n  }, []);\r\n \r\n\r\n  // checkloose\r\n  useEffect(() => {\r\n\r\n    let count = 0; // initialize a counter variable\r\n  \r\n    const handleEvent = (event) => {\r\n      if (\r\n        event.type === \"message.new\" &&\r\n        event.message.text.includes(\"failed to guess\")\r\n      ) {\r\n        count++; // increment the counter\r\n        if (count === 2) {\r\n          setGameOver({gameOver: false, guessedWord: false});\r\n          setCheckLoose(true);\r\n        }\r\n      }\r\n    };\r\n  \r\n    channel.on(\"message.new\", handleEvent);\r\n    channel.on(\"message.updated\", handleEvent);\r\n  \r\n    return () => {\r\n      channel.off(\"message.new\", handleEvent);\r\n      channel.off(\"message.updated\", handleEvent);\r\n    };\r\n  }, []);\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst [playersJoined, setPlayersJoined] = useState(channel.state.watcher_count === 2);\r\n\r\nchannel.on(\"user.watching.start\", (event) => { //makes the wordle game begin\r\n\r\n  setPlayersJoined(event.watcher_count === 2);\r\n});\r\n\r\n\r\n//not enough players joined\r\nif (!playersJoined){\r\n        return <div className='waiting'>Waiting for other player to join</div> \r\n    }\r\n    return (\r\n      <div className='gameContainer bg-gray-800'>\r\n\r\n        {checkWin ? (\r\n          <Win winnerUserId={winnerUserId} winnerTempWord={winnerTempWord} winnerUsername={winnerUsername} winnerAttempt={winnerAttempt} channel={channel} selectedWord={selectedWord} looseElo={looseElo} winElo={winElo} client={client} />\r\n        ) : checkLoose ? (\r\n          <Loose />\r\n        ) : (null)}\r\n        {!checkWin && !checkLoose && (\r\n          <Gamecontext.Provider value={{ board, setBoard, currAttempt, setCurrAttempt, onSelectLetter, onDelete, onEnter, correctWord, setDisabledLetters, disabledLetters, gameOver, setGameOver }}>\r\n            <div className='game'>\r\n              <Board />\r\n              <Keyboard />\r\n            </div>\r\n          </Gamecontext.Provider>\r\n        )}\r\n        <Window>\r\n          <MessageList disableDateSeparator closeReactionSelectorOnClick messageActions={['react']} hideDeletedMessages />\r\n          <MessageInput noFiles />\r\n        </Window>\r\n      </div>\r\n    );\r\n    }\r\n    \r\n    export default Game\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}