{"ast":null,"code":"var _jsxFileName = \"E:\\\\Prog stuff\\\\OGame\\\\frontend\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, createContext, useEffect, useContext, useRef } from 'react';\nimport { Window, MessageList, MessageInput, useChatContext } from 'stream-chat-react';\nimport './Chat.css';\nimport './Components.css';\nimport Board from './Board';\nimport Keyboard from './Keyboard';\nimport { boardDefault, generateWordSet } from './Words';\nimport WordInput from './WordInput';\nimport { Inputcontext } from './WordInput';\nimport wordleInput from './WordInput';\nimport GameOver from './GameOver';\nimport Win from './Win';\nimport GameLogic from './GameLogic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Gamecontext = /*#__PURE__*/createContext();\nfunction Game(_ref) {\n  _s();\n  let {\n    channel,\n    selectedWord,\n    wordSet\n  } = _ref;\n  //popup\n  // const [showWordInput, setShowWordInput] = useState(true)\n  // input for wordle\n\n  //wordle\n  const [board, setBoard] = useState(boardDefault);\n  const [currAttempt, setCurrAttempt] = useState({\n    attempt: 0,\n    letterPos: 0\n  });\n  const [disabledLetters, setDisabledLetters] = useState([]);\n  const [gameOver, setGameOver] = useState({\n    gameOver: false,\n    guessedWord: false\n  });\n  const [correctWord, setCorrectWord] = useState(selectedWord);\n  const [checkWin, setCheckWin] = useState(false);\n  const [wordleWord, setWordleWord] = useState(\"\");\n  const {\n    client\n  } = useChatContext();\n  const onSelectLetter = keyVal => {\n    if (currAttempt.letterPos > 4) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letterPos] = keyVal;\n    setBoard(newBoard);\n    setCurrAttempt({\n      ...currAttempt,\n      letterPos: currAttempt.letterPos + 1\n    });\n  };\n  const onDelete = () => {\n    if (currAttempt.letterPos === 0) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letterPos - 1] = \"\";\n    setBoard(newBoard);\n    setCurrAttempt({\n      ...currAttempt,\n      letterPos: currAttempt.letterPos - 1\n    });\n  };\n  const onEnter = () => {\n    if (currAttempt.letterPos !== 5) return;\n    let currWord = \"\";\n    for (let i = 0; i < 5; i++) {\n      currWord += board[currAttempt.attempt][i];\n      currWord.toLowerCase();\n    }\n    if (wordSet.has(currWord.toLowerCase())) {\n      setCurrAttempt({\n        attempt: currAttempt.attempt + 1,\n        letterPos: 0\n      });\n    } else {\n      alert(\"Word not found\");\n    }\n    if (currWord.trim().toLowerCase() === correctWord.trim().toLowerCase()) {\n      var _client$user;\n      channel.sendMessage({\n        text: `${(_client$user = client.user) === null || _client$user === void 0 ? void 0 : _client$user.name} guessed the word \"${correctWord}\"!`,\n        message_type: 'win'\n      });\n      setGameOver({\n        gameOver: true,\n        guessedWord: true\n      });\n    }\n    if (currAttempt.attempt === 5 && wordSet.has(currWord.toLowerCase())) {\n      setGameOver({\n        gameOver: true,\n        guessedWord: false\n      });\n    }\n    console.log(correctWord);\n  };\n  useEffect(() => {\n    const targetNode = document.querySelector(\".str-chat__ul\");\n\n    // Create an observer instance\n    const observer = new MutationObserver((mutationsList, observer) => {\n      for (const mutation of mutationsList) {\n        if (mutation.type === \"childList\" && mutation.target.classList.contains(\"str-chat__ul\") && mutation.addedNodes.length > 0) {\n          const addedNode = mutation.addedNodes[0];\n          if (addedNode.nodeName === \"LI\" && addedNode.textContent.includes(\"guessed the word\")) {\n            setCheckWin(true);\n          }\n        }\n      }\n    });\n\n    // Start observing the target node for configured mutations\n    observer.observe(targetNode, {\n      childList: true,\n      subtree: true\n    });\n\n    // Clean up the observer when the component unmounts\n    return () => observer.disconnect();\n  }, []);\n\n  // PLAYER LOGIC\n\n  const [playersJoined, setPlayersJoined] = useState(channel.state.watcher_count === 2);\n  channel.on(\"user.watching.start\", event => {\n    setPlayersJoined(event.watcher_count === 2);\n  });\n\n  // winner\n  const [result, setResult] = useState({\n    winner: \"none\",\n    state: \"none\"\n  });\n  if (!playersJoined) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Waiting for other player to join\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameContainer\",\n    children: [/*#__PURE__*/_jsxDEV(Gamecontext.Provider, {\n      value: {\n        board,\n        setBoard,\n        currAttempt,\n        setCurrAttempt,\n        onSelectLetter,\n        onDelete,\n        onEnter,\n        correctWord,\n        setDisabledLetters,\n        disabledLetters,\n        gameOver,\n        setGameOver\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game\",\n        children: [checkWin ? /*#__PURE__*/_jsxDEV(Win, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 34\n        }, this), gameOver.gameOver ? /*#__PURE__*/_jsxDEV(GameOver, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 33\n        }, this) : /*#__PURE__*/_jsxDEV(Keyboard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 48\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Window, {\n      children: [/*#__PURE__*/_jsxDEV(MessageList, {\n        disableDateSeparator: true,\n        closeReactionSelectorOnClick: true,\n        messageActions: [\"react\"],\n        hideDeletedMessages: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n        noFiles: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"1ZRwiogZolHNiYdxYRtx8hBNiHo=\", false, function () {\n  return [useChatContext];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","createContext","useEffect","useContext","useRef","Window","MessageList","MessageInput","useChatContext","Board","Keyboard","boardDefault","generateWordSet","WordInput","Inputcontext","wordleInput","GameOver","Win","GameLogic","Gamecontext","Game","channel","selectedWord","wordSet","board","setBoard","currAttempt","setCurrAttempt","attempt","letterPos","disabledLetters","setDisabledLetters","gameOver","setGameOver","guessedWord","correctWord","setCorrectWord","checkWin","setCheckWin","wordleWord","setWordleWord","client","onSelectLetter","keyVal","newBoard","onDelete","onEnter","currWord","i","toLowerCase","has","alert","trim","sendMessage","text","user","name","message_type","console","log","targetNode","document","querySelector","observer","MutationObserver","mutationsList","mutation","type","target","classList","contains","addedNodes","length","addedNode","nodeName","textContent","includes","observe","childList","subtree","disconnect","playersJoined","setPlayersJoined","state","watcher_count","on","event","result","setResult","winner"],"sources":["E:/Prog stuff/OGame/frontend/src/components/Game.js"],"sourcesContent":["import React, { useState, createContext, useEffect, useContext, useRef } from 'react'\r\nimport { Window, MessageList, MessageInput, useChatContext } from 'stream-chat-react'\r\nimport './Chat.css';\r\n\r\nimport './Components.css';\r\nimport Board from './Board';\r\nimport Keyboard from './Keyboard';\r\nimport { boardDefault, generateWordSet } from './Words';\r\nimport WordInput from './WordInput';\r\nimport { Inputcontext } from './WordInput';\r\nimport wordleInput from './WordInput';\r\nimport GameOver from './GameOver';\r\nimport Win from './Win';\r\nimport GameLogic from './GameLogic';\r\n\r\n\r\n\r\nexport const Gamecontext = createContext();\r\n\r\nfunction Game({channel, selectedWord, wordSet}) {\r\n\r\n\r\n\r\n  //popup\r\n // const [showWordInput, setShowWordInput] = useState(true)\r\n  // input for wordle\r\n\r\n  //wordle\r\n  const [board, setBoard] = useState(boardDefault);\r\n  const [currAttempt, setCurrAttempt] = useState({attempt: 0, letterPos: 0});\r\n  const [disabledLetters, setDisabledLetters] = useState([]);\r\n  const [gameOver, setGameOver] = useState({gameOver: false, guessedWord: false,});\r\n  const [correctWord, setCorrectWord] = useState(selectedWord);\r\n  const [checkWin, setCheckWin] = useState(false)\r\n  const [wordleWord, setWordleWord] = useState(\"\");\r\n  const { client } = useChatContext();\r\n\r\n\r\n\r\n\r\n\r\n  \r\n\r\n  const onSelectLetter = (keyVal) =>{\r\n    if (currAttempt.letterPos > 4) return;\r\n\r\n    const newBoard = [...board];\r\n    newBoard[currAttempt.attempt][currAttempt.letterPos] = keyVal;\r\n    setBoard(newBoard);\r\n    setCurrAttempt({...currAttempt, letterPos: currAttempt.letterPos + 1});\r\n  }\r\n\r\n  const onDelete = () => {\r\n    if (currAttempt.letterPos === 0 ) return; \r\n    const newBoard = [...board];\r\n    newBoard[currAttempt.attempt][currAttempt.letterPos - 1] = \"\";\r\n    setBoard(newBoard)\r\n    setCurrAttempt({ ...currAttempt, letterPos: currAttempt.letterPos -1 });\r\n  }\r\n\r\n  const onEnter = () => {\r\n    if (currAttempt.letterPos !== 5) return;\r\n    let currWord = \"\";\r\n    for (let i = 0; i < 5; i++) {\r\n      currWord += board[currAttempt.attempt][i];\r\n      currWord.toLowerCase()\r\n    }\r\n    if (wordSet.has(currWord.toLowerCase())) {\r\n      setCurrAttempt({ attempt: currAttempt.attempt + 1, letterPos: 0});\r\n    } else {\r\n      alert (\"Word not found\")\r\n    }\r\n\r\n    if (currWord.trim().toLowerCase() === correctWord.trim().toLowerCase()) {\r\n      channel.sendMessage({\r\n        text: `${client.user?.name} guessed the word \"${correctWord}\"!`,\r\n        message_type: 'win',\r\n      });\r\n      setGameOver({gameOver: true, guessedWord: true})\r\n\r\n    }\r\n    if (currAttempt.attempt === 5 && wordSet.has(currWord.toLowerCase())){\r\n      setGameOver({gameOver: true, guessedWord: false});\r\n    }\r\n    console.log(correctWord);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const targetNode = document.querySelector(\".str-chat__ul\");\r\n\r\n    // Create an observer instance\r\n    const observer = new MutationObserver((mutationsList, observer) => {\r\n      for (const mutation of mutationsList) {\r\n        if (\r\n          mutation.type === \"childList\" &&\r\n          mutation.target.classList.contains(\"str-chat__ul\") &&\r\n          mutation.addedNodes.length > 0\r\n        ) {\r\n          const addedNode = mutation.addedNodes[0];\r\n          if (\r\n            addedNode.nodeName === \"LI\" &&\r\n            addedNode.textContent.includes(\"guessed the word\")\r\n          ) {\r\n            setCheckWin(true);\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Start observing the target node for configured mutations\r\n    observer.observe(targetNode, {\r\n      childList: true,\r\n      subtree: true,\r\n    });\r\n\r\n    // Clean up the observer when the component unmounts\r\n    return () => observer.disconnect();\r\n  }, []);\r\n\r\n  // PLAYER LOGIC\r\n \r\n\r\n\r\n\r\n  const [playersJoined, setPlayersJoined] = useState(channel.state.watcher_count === 2);\r\n\r\nchannel.on(\"user.watching.start\", (event) => {\r\n  setPlayersJoined(event.watcher_count === 2);\r\n});\r\n\r\n// winner\r\nconst [result, setResult] = useState({winner: \"none\", state:\"none\"})\r\nif (!playersJoined){\r\n        return <div>Waiting for other player to join</div>\r\n    }\r\n  return (\r\n    <div className='gameContainer'>\r\n       {/*<GameLogic result={result} setResult={setResult}/>*/}\r\n      {/* <MainGame result ={result} setResult={setResult}/> */}\r\n      <Gamecontext.Provider value={{ board, setBoard, currAttempt, setCurrAttempt, onSelectLetter, onDelete, onEnter, correctWord, setDisabledLetters, disabledLetters, gameOver, setGameOver, }}>\r\n        <div className='game'>\r\n          {/*<button onClick={() =>\r\n          setShowWordInput(true)}>Show</button> */}\r\n         {/* <WordInput  visible={showWordInput} onClose={() => setShowWordInput(false)}  />  */}\r\n          { checkWin  ? <Win/> : <Board/> }\r\n          { gameOver.gameOver ? <GameOver /> : <Keyboard/>}\r\n        </div>\r\n      </Gamecontext.Provider>\r\n      <Window>\r\n        <MessageList disableDateSeparator closeReactionSelectorOnClick messageActions={[\"react\"]} hideDeletedMessages/>\r\n        <MessageInput noFiles/>\r\n      </Window>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Game\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}