{"ast":null,"code":"var _jsxFileName = \"E:\\\\Prog stuff\\\\OGame-wordle\\\\OGame-Wordle\\\\frontend\\\\src\\\\components\\\\Win.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport './WinLoss.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  client\n} = useChatContext();\nconst Win = _ref => {\n  _s();\n  let {\n    channel,\n    selectedWord,\n    winElo,\n    looseElo\n  } = _ref;\n  // Handle going back to the homepage\n  const handleGoBack = () => {\n    window.location.href = \"/\";\n  };\n  const addStatsToDatabase = async (userId, win) => {\n    try {\n      const response = await axios.post('http://localhost:3001/addStats', {\n        userId,\n        win,\n        looseElo,\n        winElo\n      });\n      console.log(response.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    const handleEvent = event => {\n      if (event.type === \"message.new\" && !event.message.text.includes(selectedWord)) {\n        var _client$user;\n        addStatsToDatabase((_client$user = client.user) === null || _client$user === void 0 ? void 0 : _client$user.id, false);\n      }\n    };\n    channel.on(\"message.new\", handleEvent);\n    channel.on(\"message.updated\", handleEvent);\n    return () => {\n      channel.off(\"message.new\", handleEvent);\n      channel.off(\"message.updated\", handleEvent);\n    };\n  }, []);\n\n  // If there's no channel object, display loading message\n  if (!channel) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Get the latest win message from the channel state\n  const winMessage = channel.state.messages[channel.state.messages.length - 1];\n\n  // Extract relevant information from the win message\n  const winnerTempWord = winMessage.winnerTempWord;\n  const winnerUsername = winMessage.winnerUsername;\n  const winnerAttempt = winMessage.winnerAttempt;\n  console.log(selectedWord);\n\n  // Render the win message with the winner's information and a go back button\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wordlewin\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Game finished!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [winnerUsername, \" got the word \\\"\", winnerTempWord, \"\\\" in \", winnerAttempt, \" attempts\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"go-back-btn\",\n      onClick: handleGoBack,\n      children: \"Go back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(Win, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Win;\nexport default Win;\nvar _c;\n$RefreshReg$(_c, \"Win\");","map":{"version":3,"names":["React","useEffect","axios","client","useChatContext","Win","channel","selectedWord","winElo","looseElo","handleGoBack","window","location","href","addStatsToDatabase","userId","win","response","post","console","log","data","error","handleEvent","event","type","message","text","includes","user","id","on","off","winMessage","state","messages","length","winnerTempWord","winnerUsername","winnerAttempt"],"sources":["E:/Prog stuff/OGame-wordle/OGame-Wordle/frontend/src/components/Win.js"],"sourcesContent":["import React, {useEffect} from 'react'\r\nimport './WinLoss.css'\r\nimport axios from 'axios';\r\nconst { client } = useChatContext();\r\n\r\nconst Win = ({channel, selectedWord, winElo, looseElo}) => {\r\n  // Handle going back to the homepage\r\n  const handleGoBack = () => {\r\n    window.location.href = \"/\";\r\n  };\r\n  \r\n\r\n\r\n  const addStatsToDatabase = async (userId, win) => {\r\n    try {\r\n      const response = await axios.post('http://localhost:3001/addStats', { userId, win, looseElo, winElo });\r\n      console.log(response.data);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    const handleEvent = (event) => {\r\n      if (\r\n        event.type === \"message.new\" &&\r\n        !event.message.text.includes(selectedWord)) {\r\n          addStatsToDatabase(client.user?.id, false)\r\n        }\r\n    };\r\n    \r\n    \r\n\r\n    channel.on(\"message.new\", handleEvent);\r\n    channel.on(\"message.updated\", handleEvent);\r\n  \r\n    return () => {\r\n      channel.off(\"message.new\", handleEvent);\r\n      channel.off(\"message.updated\", handleEvent);\r\n    };\r\n  }, []);\r\n\r\n  // If there's no channel object, display loading message\r\n  if (!channel) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  // Get the latest win message from the channel state\r\n  const winMessage = channel.state.messages[channel.state.messages.length - 1];\r\n\r\n  // Extract relevant information from the win message\r\n  const winnerTempWord = winMessage.winnerTempWord;\r\n  const winnerUsername = winMessage.winnerUsername;\r\n  const winnerAttempt = winMessage.winnerAttempt;\r\n  console.log(selectedWord);\r\n\r\n  // Render the win message with the winner's information and a go back button\r\n  return (\r\n    <div className='wordlewin'>\r\n      <h1>Game finished!</h1>\r\n      <p>{winnerUsername} got the word \"{winnerTempWord}\" in {winnerAttempt} attempts</p>\r\n      <button className='go-back-btn' onClick={handleGoBack}>Go back</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Win;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,QAAO,OAAO;AACtC,OAAO,eAAe;AACtB,OAAOC,KAAK,MAAM,OAAO;AAAC;AAC1B,MAAM;EAAEC;AAAO,CAAC,GAAGC,cAAc,EAAE;AAEnC,MAAMC,GAAG,GAAG,QAA+C;EAAA;EAAA,IAA9C;IAACC,OAAO;IAAEC,YAAY;IAAEC,MAAM;IAAEC;EAAQ,CAAC;EACpD;EACA,MAAMC,YAAY,GAAG,MAAM;IACzBC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG;EAC5B,CAAC;EAID,MAAMC,kBAAkB,GAAG,OAAOC,MAAM,EAAEC,GAAG,KAAK;IAChD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,IAAI,CAAC,gCAAgC,EAAE;QAAEH,MAAM;QAAEC,GAAG;QAAEP,QAAQ;QAAED;MAAO,CAAC,CAAC;MACtGW,OAAO,CAACC,GAAG,CAACH,QAAQ,CAACI,IAAI,CAAC;IAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdH,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC;IACpB;EACF,CAAC;EAGDrB,SAAS,CAAC,MAAM;IACd,MAAMsB,WAAW,GAAIC,KAAK,IAAK;MAC7B,IACEA,KAAK,CAACC,IAAI,KAAK,aAAa,IAC5B,CAACD,KAAK,CAACE,OAAO,CAACC,IAAI,CAACC,QAAQ,CAACrB,YAAY,CAAC,EAAE;QAAA;QAC1CO,kBAAkB,iBAACX,MAAM,CAAC0B,IAAI,iDAAX,aAAaC,EAAE,EAAE,KAAK,CAAC;MAC5C;IACJ,CAAC;IAIDxB,OAAO,CAACyB,EAAE,CAAC,aAAa,EAAER,WAAW,CAAC;IACtCjB,OAAO,CAACyB,EAAE,CAAC,iBAAiB,EAAER,WAAW,CAAC;IAE1C,OAAO,MAAM;MACXjB,OAAO,CAAC0B,GAAG,CAAC,aAAa,EAAET,WAAW,CAAC;MACvCjB,OAAO,CAAC0B,GAAG,CAAC,iBAAiB,EAAET,WAAW,CAAC;IAC7C,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,IAAI,CAACjB,OAAO,EAAE;IACZ,oBAAO;MAAA,UAAK;IAAU;MAAA;MAAA;MAAA;IAAA,QAAM;EAC9B;;EAEA;EACA,MAAM2B,UAAU,GAAG3B,OAAO,CAAC4B,KAAK,CAACC,QAAQ,CAAC7B,OAAO,CAAC4B,KAAK,CAACC,QAAQ,CAACC,MAAM,GAAG,CAAC,CAAC;;EAE5E;EACA,MAAMC,cAAc,GAAGJ,UAAU,CAACI,cAAc;EAChD,MAAMC,cAAc,GAAGL,UAAU,CAACK,cAAc;EAChD,MAAMC,aAAa,GAAGN,UAAU,CAACM,aAAa;EAC9CpB,OAAO,CAACC,GAAG,CAACb,YAAY,CAAC;;EAEzB;EACA,oBACE;IAAK,SAAS,EAAC,WAAW;IAAA,wBACxB;MAAA,UAAI;IAAc;MAAA;MAAA;MAAA;IAAA,QAAK,eACvB;MAAA,WAAI+B,cAAc,EAAC,kBAAe,EAACD,cAAc,EAAC,QAAK,EAACE,aAAa,EAAC,WAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QAAI,eACnF;MAAQ,SAAS,EAAC,aAAa;MAAC,OAAO,EAAE7B,YAAa;MAAA,UAAC;IAAO;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA;IAAA;IAAA;IAAA;EAAA,QACnE;AAEV,CAAC;AAAC,GA5DIL,GAAG;AAAA,KAAHA,GAAG;AA8DT,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}