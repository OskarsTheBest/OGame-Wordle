{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nfunction useCheckWord() {\n  _s();\n  const [checkWin, setCheckWin] = useState(false);\n  useEffect(() => {\n    const targetNode = document.querySelector(\".str-chat__li\");\n\n    // Create an observer instance\n    const observer = new MutationObserver((mutationsList, observer) => {\n      for (const mutation of mutationsList) {\n        if (mutation.type === \"childList\" && mutation.target.classList.contains(\"str-chat__ul\") && mutation.addedNodes.length > 0) {\n          const addedNode = mutation.addedNodes[0];\n          if (addedNode.nodeName === \"LI\" && addedNode.classList.contains(\"str-chat__li\") && addedNode.textContent.includes(\"guessed the word\")) {\n            setCheckWin(true);\n          }\n        }\n      }\n    });\n\n    // Start observing the target node for configured mutations\n    if (targetNode) {\n      observer.observe(targetNode.parentElement, {\n        childList: true,\n        subtree: true\n      });\n    }\n\n    // Clean up the observer when the component unmounts\n    return () => observer.disconnect();\n  }, []);\n  return checkWin;\n}\n_s(useCheckWord, \"W9P3HXQPlS9vnZAnvQGrdOgfr4k=\");\nexport default useCheckWord;","map":{"version":3,"names":["useState","useEffect","useCheckWord","checkWin","setCheckWin","targetNode","document","querySelector","observer","MutationObserver","mutationsList","mutation","type","target","classList","contains","addedNodes","length","addedNode","nodeName","textContent","includes","observe","parentElement","childList","subtree","disconnect"],"sources":["E:/Prog stuff/OGame/frontend/src/components/useCheckWord.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nfunction useCheckWord() {\r\n  const [checkWin, setCheckWin] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const targetNode = document.querySelector(\".str-chat__li\");\r\n\r\n    // Create an observer instance\r\n    const observer = new MutationObserver((mutationsList, observer) => {\r\n      for (const mutation of mutationsList) {\r\n        if (\r\n          mutation.type === \"childList\" &&\r\n          mutation.target.classList.contains(\"str-chat__ul\") &&\r\n          mutation.addedNodes.length > 0\r\n        ) {\r\n          const addedNode = mutation.addedNodes[0];\r\n          if (\r\n            addedNode.nodeName === \"LI\" &&\r\n            addedNode.classList.contains(\"str-chat__li\") &&\r\n            addedNode.textContent.includes(\"guessed the word\")\r\n          ) {\r\n            setCheckWin(true);\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Start observing the target node for configured mutations\r\n    if (targetNode) {\r\n      observer.observe(targetNode.parentElement, {\r\n        childList: true,\r\n        subtree: true,\r\n      });\r\n    }\r\n\r\n    // Clean up the observer when the component unmounts\r\n    return () => observer.disconnect();\r\n  }, []);\r\n\r\n  return checkWin;\r\n}\r\n\r\nexport default useCheckWord;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,SAASC,YAAY,GAAG;EAAA;EACtB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGJ,QAAQ,CAAC,KAAK,CAAC;EAE/CC,SAAS,CAAC,MAAM;IACd,MAAMI,UAAU,GAAGC,QAAQ,CAACC,aAAa,CAAC,eAAe,CAAC;;IAE1D;IACA,MAAMC,QAAQ,GAAG,IAAIC,gBAAgB,CAAC,CAACC,aAAa,EAAEF,QAAQ,KAAK;MACjE,KAAK,MAAMG,QAAQ,IAAID,aAAa,EAAE;QACpC,IACEC,QAAQ,CAACC,IAAI,KAAK,WAAW,IAC7BD,QAAQ,CAACE,MAAM,CAACC,SAAS,CAACC,QAAQ,CAAC,cAAc,CAAC,IAClDJ,QAAQ,CAACK,UAAU,CAACC,MAAM,GAAG,CAAC,EAC9B;UACA,MAAMC,SAAS,GAAGP,QAAQ,CAACK,UAAU,CAAC,CAAC,CAAC;UACxC,IACEE,SAAS,CAACC,QAAQ,KAAK,IAAI,IAC3BD,SAAS,CAACJ,SAAS,CAACC,QAAQ,CAAC,cAAc,CAAC,IAC5CG,SAAS,CAACE,WAAW,CAACC,QAAQ,CAAC,kBAAkB,CAAC,EAClD;YACAjB,WAAW,CAAC,IAAI,CAAC;UACnB;QACF;MACF;IACF,CAAC,CAAC;;IAEF;IACA,IAAIC,UAAU,EAAE;MACdG,QAAQ,CAACc,OAAO,CAACjB,UAAU,CAACkB,aAAa,EAAE;QACzCC,SAAS,EAAE,IAAI;QACfC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;;IAEA;IACA,OAAO,MAAMjB,QAAQ,CAACkB,UAAU,EAAE;EACpC,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOvB,QAAQ;AACjB;AAAC,GAvCQD,YAAY;AAyCrB,eAAeA,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}