{"ast":null,"code":"var _jsxFileName = \"E:\\\\Prog stuff\\\\OGame\\\\frontend\\\\src\\\\components\\\\Maingame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Cardturn from './Cardturn';\nimport { useChannelStateContext, useChatContext } from 'stream-chat-react';\n\n// ALL TURN CODE \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Maingame(result, setResult) {\n  _s();\n  const [mainGame, setMainGame] = useState([\"\", \"\"]);\n  const [player, setPlayer] = useState(\"X\");\n  const [turn, setTurn] = useState(\"X\");\n  const {\n    channel\n  } = useChannelStateContext();\n  const {\n    client\n  } = useChatContext();\n  useEffect(() => {\n    checkWin();\n  }, [mainGame]);\n  const chooseCard = async Cardturn => {\n    if (turn === player && mainGame[Cardturn] === \"\") {\n      setTurn(player === \"X\" ? \"O\" : \"X\");\n      await channel.sendEvent({\n        type: \"game-move\",\n        data: {\n          Cardturn,\n          player\n        }\n      });\n      setMainGame(mainGame.map((val, idx) => {\n        if (idx === Cardturn && val === \"\") {\n          return player;\n        }\n        return val;\n      }));\n    }\n  };\n  const checkWin = () => {\n    Patterns.forEach(currPattern => {\n      const firstPlayer = mainGame[currPattern[0]];\n      if (firstPlayer == \"\") return;\n      let foundWinningPattern = true;\n      currPattern.forEach(idx => {\n        if (mainGame[idx] != firstPlayer) {\n          foundWinningPattern = false;\n        }\n      });\n      if (foundWinningPattern) {\n        alert(\"Winner\", mainGame[currPattern[0]]);\n        setResult({\n          winner: mainGame[currPattern[0]],\n          state: \"Won\"\n        });\n      }\n    });\n  };\n  channel.on(event => {\n    if (event.type = \"game-move\" && event.user.id !== client.userID) {\n      const currentPlayer = event.data.player === \"X\" ? \"O\" : \"X\";\n      setPlayer(currentPlayer);\n      setTurn(currentPlayer);\n      setMainGame(mainGame.map((val, idx) => {\n        if (idx === event.data.Cardturn && val === \"\") {\n          return event.data.player;\n        }\n        return val;\n      }));\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainGame\",\n    children: [/*#__PURE__*/_jsxDEV(Cardturn, {\n      chooseCard: () => {\n        chooseCard(0);\n      },\n      val: mainGame[0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Cardturn, {\n      chooseCard: () => {\n        chooseCard(1);\n      },\n      val: mainGame[1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Cardturn, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_s(Maingame, \"112qdsquCQv5poTl2qnqYx1zdEQ=\", false, function () {\n  return [useChannelStateContext, useChatContext];\n});\n_c = Maingame;\nexport default Maingame;\nvar _c;\n$RefreshReg$(_c, \"Maingame\");","map":{"version":3,"names":["React","useState","useEffect","Cardturn","useChannelStateContext","useChatContext","Maingame","result","setResult","mainGame","setMainGame","player","setPlayer","turn","setTurn","channel","client","checkWin","chooseCard","sendEvent","type","data","map","val","idx","Patterns","forEach","currPattern","firstPlayer","foundWinningPattern","alert","winner","state","on","event","user","id","userID","currentPlayer"],"sources":["E:/Prog stuff/OGame/frontend/src/components/Maingame.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport Cardturn from './Cardturn'\r\nimport { useChannelStateContext, useChatContext } from 'stream-chat-react'\r\n\r\n// ALL TURN CODE \r\nfunction Maingame(result, setResult) {\r\n  const [mainGame, setMainGame] = useState([\"\",\"\"]);\r\n  const [player, setPlayer] = useState(\"X\");\r\n  const [turn, setTurn] = useState(\"X\");\r\n\r\n  const { channel } = useChannelStateContext();\r\n  const {client} = useChatContext();\r\n\r\n  useEffect(() =>{\r\n    checkWin();\r\n  }, [mainGame])\r\n  const chooseCard = async (Cardturn) => {\r\n    if (turn === player && mainGame[Cardturn] === \"\"){\r\n      setTurn(player === \"X\" ? \"O\": \"X\");\r\n\r\n      await channel.sendEvent({\r\n        type: \"game-move\",\r\n        data: {Cardturn, player},\r\n      })\r\n      setMainGame(mainGame.map((val, idx) =>{\r\n        if (idx === Cardturn && val === \"\"){\r\n          return player;\r\n        }\r\n        return val\r\n      }));\r\n    }\r\n  };\r\n\r\n  const checkWin = () => {\r\n    Patterns.forEach((currPattern) => {\r\n      const firstPlayer = mainGame[currPattern[0]];\r\n      if (firstPlayer == \"\") return\r\n      let foundWinningPattern = true;\r\n      currPattern.forEach((idx) =>{\r\n        if (mainGame[idx] != firstPlayer) {\r\n          foundWinningPattern = false;\r\n        }\r\n      });\r\n      if (foundWinningPattern){\r\n        alert(\"Winner\",mainGame[currPattern[0]])\r\n        setResult({winner: mainGame[currPattern[0]], state: \"Won\"});\r\n      }\r\n    });\r\n  };\r\n\r\n\r\n  \r\n\r\n\r\n\r\n  channel.on((event) => {\r\n    if (event.type = \"game-move\" && event.user.id !== client.userID){\r\n        const currentPlayer = event.data.player === \"X\" ? \"O\" : \"X\";\r\n        setPlayer(currentPlayer);\r\n        setTurn(currentPlayer);\r\n      setMainGame(mainGame.map((val, idx) =>{\r\n        if (idx === event.data.Cardturn && val === \"\"){\r\n          return event.data.player;\r\n        }\r\n        return val\r\n      }));\r\n    }\r\n  })\r\n\r\n  return (\r\n    <div className='mainGame'>\r\n      <Cardturn chooseCard={() =>  {chooseCard(0);}} val={mainGame[0]}/>\r\n      <Cardturn chooseCard={() =>  {chooseCard(1);}} val={mainGame[1]}/>\r\n      <Cardturn/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Maingame\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}